= Installation =

To install the CARE plugin is through Eclipse IDE. For this purpose, we have created an update site "http://care.googlecode.com/svn/trunk/care-update-site/" to install the CARE plugin on any operating system. The plugin can be installed via Eclipse IDE using *Help -> Install New Software* option. Once the plugin is installed, it can be accessed through CARE menu (added to the Eclipse workbench) where we can select different refactoring options. 


= Usage Instructions =

== CARE User Interface ==

The following figure shows the UI of the CARE Plugin. In order to start the refactoring process, programs must be loaded into the Eclipse workspace. In order to analyse a single project,  click on https://sites.google.com/site/careplugin/_/rsrc/1371692455377/documentation/single1.png  button. To analyse all opened projects in the workspace, click on https://sites.google.com/site/careplugin/_/rsrc/1371692552262/documentation/multiple1.png  button. 

<a href="https://sites.google.com/site/careplugin/_/rsrc/1371650727774/documentation/care-main%20copy.png"><img src=https://sites.google.com/site/careplugin/_/rsrc/1371650727774/documentation/care-main%20copy.png?height=178&width=400/></a>

== CARE Preferences ==

We can tweak some options in the CARE plugin. For example, we can edit the maximum number of refactoring steps for a program. The default value is 50. In a similar way, we can tell the plugin about certain classes that should not be moved during the automated refactoring process. 

<a href="https://sites.google.com/site/careplugin/documentation/care-preferences.png">https://sites.google.com/site/careplugin/documentation/care-preferences.png?height=334&width=400</a>


== Refactoring Output ==

After the refactoring process is completed, we can view the refactoring related information in the OUTPUT folder of each project. The output is generated as comma separated (CSV) files.  The description of the files is as follows:

||*File* *name*	|| *Purpose*||
|| instances	||Keeps track of antipattern instance count decrease after each refactoring. ||
||metrics	||All other metrics are stored in this file, such as  strongly connected components metrics.
|| g2c-success	||Graph-to-Code success rate. This data is used to compute the refactorability.  
|| constraints	||Information related to pre and postconditions is stored here.
|| details    	||This file contains detailed information about the removed dependency, such as how many patterns were removed.    
|| error-edge	||Due to limitations of Eclipse refactorings, some refactorings may create compilation error. This file contains the name of class that created the problem. We can put this class name in the list of blacklisted classes. 
||package-metrics	|| Here all  the package related metrics are stored including before and after values.