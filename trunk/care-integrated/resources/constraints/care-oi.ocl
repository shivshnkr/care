--package nz::ac::massey::cs::care::refactoring::manipulators

-- The method return type of any source class method should not be Target class
context Preconditions
inv: source.methodList->select(method : MethodObject | target.getSimpleName() = method.getReturnType().getClassType())->isEmpty()

-- The type of a method parameter of source class should not be Target class.
-- this preconditions specifies that collection of parameters with the target type is empty.
inv: source.methodList->forAll(method : MethodObject |  method.getParameterTypeList()
     ->select(p : TypeObject | p.getClassType() = target.getSimpleName())->isEmpty())
inv: source.constructorList->forAll(method : ConstructorObject |  method.getParameterTypeList()
     ->select(p : TypeObject | p.getClassType() = target.getSimpleName())->isEmpty())
     
-- Target type should not be used to declare a new instance wihtin a source class method/constructor/field
inv: source.methodList->forAll(m : MethodObject |
	 m.getCreations()->select(c : CreationObject | c.getType().getClassType() = target.getSimpleName()) ->isEmpty())
inv: source.constructorList->forAll(m : ConstructorObject |
	 m.getCreations()->select(c : CreationObject | c.getType().getClassType() = target.getSimpleName()) ->isEmpty())
inv: source.fieldList->select(f : FieldObject | f.isClassInstanceCreation() and f.getInitializerClassName() = target.getSimpleName())->isEmpty() 
	 	 
-- Target type should not be used to declare a local variable wihtin a source class method/constructor/field
inv: source.methodList->forAll(m : MethodObject |
	 m.getLocalVariableDeclarations()->select(lvd: LocalVariableDeclarationObject| lvd.getType().getClassType() = target.getSimpleName())->isEmpty())
inv: source.constructorList->forAll(m : ConstructorObject |
	 m.getLocalVariableDeclarations()->select(lvd: LocalVariableDeclarationObject| lvd.getType().getClassType() = target.getSimpleName())->isEmpty())
inv: source.fieldList->select(f : FieldObject | f.getType().getClassType() = target.getSimpleName()) -> isEmpty()
	  

context Postconditions
inv: let buildResult : BuildResult = antRunner.run() in 
buildResult.isCompilationPassed() = true and 
buildResult.isTestPassed() = 1
 
--endpackage