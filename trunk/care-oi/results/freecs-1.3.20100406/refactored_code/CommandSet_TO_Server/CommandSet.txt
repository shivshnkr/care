/**
 * Copyright (C) 2003  Manfred Andres
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 * Created on 28.09.2003
 */

package freecs.commands;
import freecs.interfaces.ICommand;
import freecs.interfaces.IReloadable;
import freecs.util.FileMonitor;
import freecs.util.logger.LogWriter;
import freecs.content.MessageState;
import freecs.Server;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Properties;

/**
 * @author Manfred Andres
 *
 * freecs.commands
 */
public class CommandSet implements IReloadable {
	public static final byte UNKNOWN_COMMAND=-1;
	public static final byte TRUE=1;
	public static final byte FALSE=0;
	public static final byte INTERRUPTED = Byte.MIN_VALUE;
	private static final CommandSet cs = new CommandSet();
	private HashMap<String, Object>allCmds, availableCmds;
	private Properties props;	
	private File 	cfgFile = null;
	private boolean cfgFilePresent = false;
	private long	cfgFileLastModified;

	private CommandSet () {
		props = new Properties();
		allCmds 		= initAllCommands();
		availableCmds 	= initAvailableCommands ();
	}
	
	public void checkCommendSet (){
	       allCmds         = initAllCommands();
	       availableCmds   = initAvailableCommands ();
	}
	
	public Properties getCommandSetProps(){
	    return props;
	}

	private HashMap<String, Object> initAvailableCommands () {
		cfgFile = new File (BASE_PATH + "/config", "command.properties");
		HashMap<String, Object> available = checkActivatedCommands ();
		FileMonitor.getFileMonitor().addReloadable (this);
		return available;
	}
	
	private HashMap<String, Object> checkActivatedCommands () {
		props = new Properties();
	    props.setProperty("f+", "false");
	    props.setProperty("f-", "false");

		if (cfgFile.exists() && cfgFile.isFile()) try {
			cfgFilePresent = true;
			cfgFileLastModified = cfgFile.lastModified();
			FileInputStream in = new FileInputStream(cfgFile);
			props.load(in);
			in.close();
		} catch (FileNotFoundException fnfe) {
			// never
		} catch (IOException ioe) {
			log(this, "Unable to read command.properties", Server.MSG_ERROR,
					Server.LVL_MAJOR);
		} else {
			cfgFilePresent = false;
		}
		if (props == null)
			return allCmds;
		HashMap<String, Object> available = new HashMap<String, Object>();
		for (Iterator<String> i= allCmds.keySet ().iterator (); i.hasNext() ;) {
			String curr = (String) i.next();
			String key = curr.substring(1).toLowerCase();
			String value = curr = props.getProperty (key);
			if (curr != null 
				&& (curr.equals("off") 
					|| curr.equals ("false")))
				continue;
			StringBuilder cmdKey = new StringBuilder("/").append(key);
			ICommand cmd = (ICommand) allCmds.get(cmdKey.toString());
			available.put(cmdKey.toString(), cmd);
		}
		return available;
	}
	
	// FIXME: should be done automatically (placing a class which name
	// starts with Cmd into freecs.commands should automatically load
	// this class on startup)
	private HashMap<String, Object> initAllCommands() {
		HashMap<String, Object> all = new HashMap<String, Object> (allCommands);
		return all;
	}
	
	public static CommandSet getCommandSet () {
		return cs;
	}
	
	public ICommand getCommand (String cmd) {
		return (ICommand) allCmds.get(cmd);
	} 

	public byte evaluate (String cmd, MessageState msgState, String param) {
        try {
            return evaluate (cmd, msgState, param, false);
        } catch (Exception e) {
            debug(cmd, "evaluation caused exception", e, Server.MSG_ERROR,
					Server.LVL_MAJOR);
        }
        return -1;
	}
	
	public byte evaluate (String cmd, MessageState msgState, String param, boolean moderated) {
        try {
    		if (!msgState.cb.isValid())
    			return (INTERRUPTED);
    		
    		if (cmd.startsWith("/flock")){
    		    if (!cmd.equals("/flock")) {
    			    StringBuffer param_temp = new StringBuffer(cmd.substring(6));
    			    param_temp.append(" ");
    			    param_temp.append(param);
    			    param = param_temp.toString();
    			    cmd = "/flock";
     		    } else {
    		    	StringBuffer param_temp = new StringBuffer("col");
    			    param_temp.append(" ");
    			    param_temp.append(param);
    			    param = param_temp.toString();
    			    cmd = "/flock";
     		    }
    		}   
    		
    		ICommand cmdObj = (ICommand) availableCmds.get(cmd);
    		if (!USE_BGCOLOR && cmd.equals("/bgcol"))
    			cmdObj=null;
    		if (cmdObj == null) 
    			return (UNKNOWN_COMMAND);
    		return (cmdObj.execute(msgState, param) ? TRUE : FALSE);
        } catch (Exception e) {
            debug(cmd, "evaluation caused exception", e, Server.MSG_ERROR,
					Server.LVL_MAJOR);
        }
        return -1;
	}

	/**
	 * Interface IReloadable's methods are deffined below here
	 */
	public boolean filePresent() {
		return cfgFilePresent;
	}

	public File getFile() {
		return cfgFile;
	}

	public long lastModified() {
		return cfgFileLastModified;
	}

	public void changed() {
		log(this, "changed: reloaded commandset", Server.MSG_STATE,
				Server.LVL_MINOR);
		availableCmds=checkActivatedCommands ();
	}

	public void removed() {
		log(this, "removed: removed commandset", Server.MSG_STATE,
				Server.LVL_MINOR);
		availableCmds=checkActivatedCommands ();
	}
	
	public void created() {
		log(this, "created: loaded commandset", Server.MSG_STATE,
				Server.LVL_MINOR);
		availableCmds=checkActivatedCommands ();
	}
	public String toString () {
		return ("[CommandSet]");
	}

	/**
	 * Logging method configured by the loglevel mechanism
	 * @param msg  the message to log
	 * @param type  the type of message (MSG_ prefixed konstants are used here)
	 * @param lvl  the level of attention to use here (LVL_ prefixed konstants are used here)
	 */
	public static void log(Object o, String msg, short type, short lvl) {
		StringBuffer sb = new StringBuffer();
		try {
			if (LOG_MASK[type].intValue() < lvl && !DEBUG)
				return;
			sb.append("[");
			sb.append(Server.formatDefaultTimeStamp(System.currentTimeMillis()));
			switch (lvl) {
			case LVL_MAJOR:
				sb.append("] MAJOR-| ");
				break;
			case LVL_HALT:
				sb.append("] HALT -| ");
				break;
			default:
				sb.append("]      -| ");
			}
			if (o != null) {
				sb.append(o.toString());
				sb.append(": ");
			}
			sb.append(msg);
			sb.append("\r\n");
			if ((type == MSG_CONFIG && LOGFILE[MSG_CONFIG].equals("console"))
					|| (type == MSG_AUTH && LOGFILE[MSG_AUTH].equals("console"))
					|| (type == MSG_STATE && LOGFILE[MSG_STATE]
							.equals("console"))
					|| (type == MSG_TRAFFIC && LOGFILE[MSG_TRAFFIC]
							.equals("console"))
					|| (type == MSG_ERROR && LOGFILE[MSG_ERROR]
							.equals("console"))) {
				System.out.print(sb.toString());
			} else {
				LogWriter.instance.addLogMessage(type, sb.toString());
			}
			if (lvl == LVL_HALT)
				System.exit(1);
		} catch (Exception e) {
			System.err.println("Server.log caused Exception for Message:");
			System.err.print(sb.toString());
			e.printStackTrace();
		}
	}

	/**
	 * Debuging method configured by the loglevel mechanism
	 * @param prefix  to write before other stuff
	 * @param t  is the throwable to print the stacktrace from
	 * @param type  the type of message, konstants with MSG_ prefix are used here
	 * @param lvl  the level of atention to use here, konstants with LVL_ prefix are used here
	 */
	public static void debug(Object o, String prefix, Throwable t, short type,
			short lvl) {
		if (LOG_MASK[type].intValue() < lvl && !DEBUG)
			return;
		StringBuffer sb = new StringBuffer();
		sb.append(prefix);
		sb.append("\r\n");
		sb.append(t.toString());
		StackTraceElement ste[] = t.getStackTrace();
		for (int i = 0; i < ste.length; i++) {
			sb.append("\r\n    at ");
			sb.append(ste[i].getClassName());
			sb.append("(");
			sb.append(ste[i].getFileName());
			sb.append(":");
			sb.append(ste[i].getLineNumber());
			sb.append(")");
		}
		log(o, sb.toString(), type, lvl);
	}

	public static String formatDefaultTimeStamp(long ts) {
		cal.setTimeInMillis(ts);
		return defaultDateFormat.format(cal.getTime());
	}
	public static String BASE_PATH;
	public static final short MSG_ERROR = 4;
	public static final short LVL_MAJOR = 1;
	public static Server srv = null;
	public HashMap<String, Object> allCommands = new HashMap<String, Object>();
	public boolean ALLOW_EXTERNAL, DEBUG_TEMPLATESET, USE_HTTP11, USE_IP_BAN,
			THREAD_PER_READ, USE_TOKENSTORE, MD5_PASSWORDS,
			USE_MESSAGE_RENDER_CACHE, USE_TRAFFIC_MONITOR,
			USE_CENTRAL_REQUESTQUEUE, ALLOW_CHANGE_USERAGENT,
			STRICT_HOST_BINDING, CAN_DEL_LOGS, USE_FADECOLOR, USE_BGCOLOR,
			BLOCKED_NICK_AUTOHARDKICK, USE_PLUGINS;
	public static final short MSG_STATE = 2;
	public static final short LVL_MINOR = 2;
	public static Short LOG_MASK[] = new Short[7];
	public static boolean DEBUG = false;
	public static final short LVL_HALT = 0;
	public static final short MSG_CONFIG = 0;
	/**
	 * LOGGING (will be moved to an extra object...
	 */
	public static String[] LOGFILE = { "console", "console", "console",
			"console", "console", "console", "console" };
	public static final short MSG_AUTH = 1;
	public static final short MSG_TRAFFIC = 3;
	public static Calendar cal = Calendar.getInstance();
	public static SimpleDateFormat defaultDateFormat = new SimpleDateFormat(
			"yyyy.MM.dd HH:mm:ss");
}

//*********************REFACTORED CODE ****************
