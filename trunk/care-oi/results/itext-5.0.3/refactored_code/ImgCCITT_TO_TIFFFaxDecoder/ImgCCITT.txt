/*
 * $Id: ImgCCITT.java 4113 2009-12-01 11:08:59Z blowagie $
 *
 * This file is part of the iText project.
 * Copyright (c) 1998-2009 1T3XT BVBA
 * Authors: Bruno Lowagie, Paulo Soares, et al.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED BY 1T3XT,
 * 1T3XT DISCLAIMS THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * http://itextpdf.com/terms-of-use/
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License,
 * you must retain the producer line in every PDF that is created or manipulated
 * using iText.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the iText software without
 * disclosing the source code of your own applications.
 * These activities include: offering paid services to customers as an ASP,
 * serving PDFs on the fly in a web application, shipping iText with a closed
 * source product.
 *
 * For more information, please contact iText Software Corp. at this
 * address: sales@itextpdf.com
 */
package com.itextpdf.text;

import com.itextpdf.text.pdf.codec.TIFFFaxDecoder;
import java.net.URL;
import com.itextpdf.text.error_messages.MessageLocalization;

/**
 * CCITT Image data that has to be inserted into the document
 *
 * @see		Element
 * @see		Image
 *
 * @author  Paulo Soares
 */

public class ImgCCITT extends Image {

    ImgCCITT(Image image) {
        super(image);
    }

    /** Creates an Image with CCITT compression.
     *
     * @param width the exact width of the image
     * @param height the exact height of the image
     * @param reverseBits reverses the bits in <code>data</code>.
     *  Bit 0 is swapped with bit 7 and so on.
     * @param typeCCITT the type of compression in <code>data</code>. It can be
     * CCITTG4, CCITTG31D, CCITTG32D
     * @param parameters parameters associated with this stream. Possible values are
     * CCITT_BLACKIS1, CCITT_ENCODEDBYTEALIGN, CCITT_ENDOFLINE and CCITT_ENDOFBLOCK or a
     * combination of them
     * @param data the image data
     * @throws BadElementException on error
     */

    public ImgCCITT(int width, int height, boolean reverseBits, int typeCCITT, int parameters, byte[] data) throws BadElementException{
        super((URL)null);
        if (typeCCITT != CCITTG4 && typeCCITT != CCITTG3_1D && typeCCITT != CCITTG3_2D)
            throw new BadElementException(MessageLocalization.getComposedMessage("the.ccitt.compression.type.must.be.ccittg4.ccittg3.1d.or.ccittg3.2d"));
        if (reverseBits)
            reverseBits(data);
        type = IMGRAW;
        scaledHeight = height;
        setTop(scaledHeight);
        scaledWidth = width;
        setRight(scaledWidth);
        colorspace = parameters;
        bpc = typeCCITT;
        rawData = data;
        plainWidth = getWidth();
        plainHeight = getHeight();
    }

	/**
	 * Reverses the bits in the array
	 * @param b  the bits to reverse
	 * @since  2.0.7
	 */
	public static void reverseBits(byte[] b) {
		for (int k = 0; k < b.length; ++k)
			b[k] = flipTable[b[k] & 0xff];
	}

	static byte flipTable[] = { 0, -128, 64, -64, 32, -96, 96, -32, 16, -112,
			80, -48, 48, -80, 112, -16, 8, -120, 72, -56, 40, -88, 104, -24,
			24, -104, 88, -40, 56, -72, 120, -8, 4, -124, 68, -60, 36, -92,
			100, -28, 20, -108, 84, -44, 52, -76, 116, -12, 12, -116, 76, -52,
			44, -84, 108, -20, 28, -100, 92, -36, 60, -68, 124, -4, 2, -126,
			66, -62, 34, -94, 98, -30, 18, -110, 82, -46, 50, -78, 114, -14,
			10, -118, 74, -54, 42, -86, 106, -22, 26, -102, 90, -38, 58, -70,
			122, -6, 6, -122, 70, -58, 38, -90, 102, -26, 22, -106, 86, -42,
			54, -74, 118, -10, 14, -114, 78, -50, 46, -82, 110, -18, 30, -98,
			94, -34, 62, -66, 126, -2, 1, -127, 65, -63, 33, -95, 97, -31, 17,
			-111, 81, -47, 49, -79, 113, -15, 9, -119, 73, -55, 41, -87, 105,
			-23, 25, -103, 89, -39, 57, -71, 121, -7, 5, -123, 69, -59, 37,
			-91, 101, -27, 21, -107, 85, -43, 53, -75, 117, -11, 13, -115, 77,
			-51, 45, -83, 109, -19, 29, -99, 93, -35, 61, -67, 125, -3, 3,
			-125, 67, -61, 35, -93, 99, -29, 19, -109, 83, -45, 51, -77, 115,
			-13, 11, -117, 75, -53, 43, -85, 107, -21, 27, -101, 91, -37, 59,
			-69, 123, -5, 7, -121, 71, -57, 39, -89, 103, -25, 23, -105, 87,
			-41, 55, -73, 119, -9, 15, -113, 79, -49, 47, -81, 111, -17, 31,
			-97, 95, -33, 63, -65, 127, -1 };
}

//*********************REFACTORED CODE ****************
