/*
 	(c) Copyright 2005, 2006, 2007, 2008, 2009 Hewlett-Packard Development Company, LP
 	All rights reserved - see end of file.
 	$Id: RuleSetAssembler.java,v 1.1 2009/06/29 08:55:49 castagna Exp $
*/

package com.hp.hpl.jena.assembler.assemblers;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.*;

import com.hp.hpl.jena.assembler.*;
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.reasoner.rulesys.OWLFBRuleReasoner;
import com.hp.hpl.jena.reasoner.rulesys.OWLMicroReasoner;
import com.hp.hpl.jena.reasoner.rulesys.OWLMiniReasoner;
import com.hp.hpl.jena.reasoner.rulesys.RDFSFBRuleReasoner;
import com.hp.hpl.jena.reasoner.rulesys.Rule;
import com.hp.hpl.jena.reasoner.rulesys.Rule.Parser;
import com.hp.hpl.jena.reasoner.rulesys.Rule.ParserException;
import com.hp.hpl.jena.shared.RulesetNotFoundException;
import com.hp.hpl.jena.shared.WrappedIOException;
import com.hp.hpl.jena.util.FileManager;
import com.hp.hpl.jena.util.FileUtils;

public class RuleSetAssembler extends AssemblerBase implements Assembler
    {
    @Override public Object open( Assembler a, Resource root, Mode irrelevant )
        { 
        checkType( root, JA.RuleSet );
        return createRuleSet( a, root ); 
        }

    public static RuleSet createRuleSet( Assembler a, Resource root )
        { return RuleSet.create( addRules( new ArrayList<Rule>(), a, root ) ); }

    public static List<Rule> addRules( List<Rule> result, Assembler a, Resource root )
        {
        addLiteralRules( root, result );
        addIndirectRules( a, root, result );
        addExternalRules( root, result );
        return result;
        }

    static private void addIndirectRules( Assembler a, Resource root, List<Rule> result )
        {
        StmtIterator it = root.listProperties( JA.rules );
        while (it.hasNext()) 
            {
            Resource r = getResource( it.nextStatement() );
            result.addAll( ((RuleSet) a.open( r )).getRules() );
            }
        }

    static private void addExternalRules( Resource root, List<Rule> result )
        {
        StmtIterator it = root.listProperties( JA.rulesFrom );
        while (it.hasNext())
            {
            Resource s = getResource( it.nextStatement() );
            result.addAll( rulesFromURL(s.getURI()) );
            }
        }

    static private void addLiteralRules( Resource root, List<Rule> result )
        {
        StmtIterator it = root.listProperties( JA.rule );
        while (it.hasNext())
            {
            String s = getString( it.nextStatement() );
            result.addAll( parseRules(s) );
            }
        }

	/**
	 * Answer the list of rules parsed from the given URL.
	 * @throws RulesetNotFoundException
	 */
	public static List<Rule> rulesFromURL(String uri) {
		try {
			BufferedReader br = FileUtils.asBufferedUTF8(FileManager.get()
					.open(uri));
			return parseRules(Rule.rulesParserFromReader(br));
		} catch (WrappedIOException e) {
			throw new RulesetNotFoundException(uri);
		}
	}

	/**
	 * Parse a string as a list a rules.
	 * @return  a list of rules
	 * @throws ParserException  if there is a problem
	 */
	public static List<Rule> parseRules(String source) throws ParserException {
		return parseRules(new Parser(source));
	}

	/**
	 * Processes the source reader stripping off comment lines and noting prefix definitions (@prefix) and rule inclusion commands (@include). Returns a parser which is bound to the stripped source text with  associated prefix and rule inclusion definitions.
	 */
	public static Parser rulesParserFromReader(BufferedReader src) {
		try {
			StringBuffer result = new StringBuffer();
			String line;
			Map<String, String> prefixes = new HashMap<String, String>();
			List<Rule> preloadedRules = new ArrayList<Rule>();
			while ((line = src.readLine()) != null) {
				if (line.startsWith("#"))
					continue;
				line = line.trim();
				if (line.startsWith("//"))
					continue;
				if (line.startsWith("@prefix")) {
					line = line.substring("@prefix".length());
					String prefix = nextArg(line);
					String rest = nextAfterArg(line);
					if (prefix.endsWith(":"))
						prefix = prefix.substring(0, prefix.length() - 1);
					String url = extractURI(rest);
					prefixes.put(prefix, url);
				} else if (line.startsWith("@include")) {
					line = line.substring("@include".length());
					String url = extractURI(line);
					if (url.equalsIgnoreCase("rdfs")) {
						preloadedRules.addAll(RDFSFBRuleReasoner.loadRules());
					} else if (url.equalsIgnoreCase("owl")) {
						preloadedRules.addAll(OWLFBRuleReasoner.loadRules());
					} else if (url.equalsIgnoreCase("owlmicro")) {
						preloadedRules.addAll(OWLMicroReasoner.loadRules());
					} else if (url.equalsIgnoreCase("owlmini")) {
						preloadedRules.addAll(OWLMiniReasoner.loadRules());
					} else {
						preloadedRules.addAll(rulesFromURL(url));
					}
				} else {
					result.append(line);
					result.append("\n");
				}
			}
			Parser parser = new Parser(result.toString());
			parser.registerPrefixMap(prefixes);
			parser.addRulesPreload(preloadedRules);
			return parser;
		} catch (IOException e) {
			throw new WrappedIOException(e);
		}
	}

	/**
	 * Run a pre-bound rule parser to extract it's rules
	 * @return  a list of rules
	 * @throws ParserException  if there is a problem
	 */
	public static List<Rule> parseRules(Parser parser) throws ParserException {
		boolean finished = false;
		List<Rule> ruleset = new ArrayList<Rule>();
		ruleset.addAll(parser.getRulesPreload());
		while (!finished) {
			try {
				parser.peekToken();
			} catch (NoSuchElementException e) {
				finished = true;
				break;
			}
			Rule rule = parser.parseRule();
			ruleset.add(rule);
		}
		return ruleset;
	}

	/**
	 * Helper function to return the next whitespace delimited argument from the string
	 */
	private static String nextArg(String token) {
		int start = nextSplit(0, false, token);
		int stop = nextSplit(start, true, token);
		return token.substring(start, stop);
	}

	/**
	 * Helper function to return the remainder of the line after stripping off the next whitespace delimited argument from the string
	 */
	private static String nextAfterArg(String token) {
		int start = nextSplit(0, false, token);
		int stop = nextSplit(start, true, token);
		int rest = nextSplit(stop, false, token);
		return token.substring(rest);
	}

	/**
	 * Helper function find a URI argument in the current string, optionally surrounded by matching <>.
	 */
	private static String extractURI(String lineSoFar) {
		String token = lineSoFar.trim();
		if (token.startsWith("<")) {
			int split = token.indexOf('>');
			token = token.substring(1, split);
		}
		return token;
	}

	/**
	 * Helper function - find index of next whitespace or non white after the start index. 
	 */
	private static int nextSplit(int start, boolean white, String line) {
		int i = start;
		while (i < line.length()) {
			boolean isWhite = Character.isWhitespace(line.charAt(i));
			if ((white & isWhite) || (!white & !isWhite)) {
				return i;
			}
			i++;
		}
		return i;
	}
    }


/*
 * (c) Copyright 2005, 2006, 2007, 2008, 2009 Hewlett-Packard Development Company, LP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
//*********************REFACTORED CODE ****************
