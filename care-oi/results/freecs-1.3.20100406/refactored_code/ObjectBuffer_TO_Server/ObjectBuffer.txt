/**
 * Copyright (C) 2003  Manfred Andres
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package freecs.util;

import freecs.Server;
import freecs.util.logger.LogWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;

/**
 * FIFO-Buffer for objects whicht automatically removes Objects retrieved via
 * get(). Programmers have to verify if value has bin put to this ObjectBuffer.
 * If buffer is full, put-method returns false, on success it returns true.
 */
public class ObjectBuffer {
   private Object elements[];
   private volatile int    nextAdd;
   private volatile int    nextRemove;
   private volatile int    capacity;
   private volatile int    counter=0;

   public ObjectBuffer (int cap) throws IllegalArgumentException {
      if (cap < 2)
         throw new IllegalArgumentException("Capacity must be higher than 1 to make sense");
      this.capacity = cap;
      this.nextAdd=0;
      this.nextRemove=0;
      elements = new Object[capacity];
      if (TRACE_CREATE_AND_FINALIZE)
          log(this, "++++++++++++++++++++++++++++++++++++++++CREATE",
				Server.MSG_STATE, Server.LVL_VERY_VERBOSE);
   }

   public int size () {
      return counter;
   }

   public int capacity () {
      return capacity;
   }

   public boolean isEmpty () {
      return counter==0;
   }

   public boolean isFull () {
      return counter==capacity;
   }

   public boolean put (Object o) {
       if (o==null) 
           throw new NullPointerException ("ObjectBuffer unable to store null");
      if (this.isFull ()) 
          return false;
      if (counter == 0  && elements == null){
          elements = new Object[capacity];
      }

      elements[nextAdd] = o;
      nextAdd++;
      if (nextAdd >= capacity){
         nextAdd = 0;       
         resizeTo(capacity);
      }
      counter++;
      return true;
   }
	
	public boolean contains (Object o) {
		for (int i = 0, j=nextRemove; i < counter; i++, j++) {
			if (j >= capacity) j = 0;
			if (elements[j].equals (o)) return true;
		}
		return false;
	}

   public Object get () {
      if (this.isEmpty ()) return null;
      return elements[nextRemove];
   }

   public Object pop () {
      if (this.isEmpty ()) return null;
      Object retObj = elements[nextRemove];
      elements[nextRemove]=null;
      nextRemove++;
      if (nextRemove >= capacity)
         nextRemove = 0;
      counter--;
      if (counter == 0){
          elements = null;
      }
      return (retObj);
   }
    
    public void inhale (ObjectBuffer ob) {
        elements = new Object[ob.capacity()];
        while (!ob.isEmpty())
            this.put(ob.pop());
    }
    
    public void clear(){
        elements = null;
        nextRemove = 0;
    }

    public void resizeTo (int size) throws IllegalArgumentException {
        if (size < this.size())
            throw new IllegalArgumentException("new capacity may not be lower than current size");
        if (size == elements.length)
            return;
        Object newelements[] = new Object[size];
        synchronized (this) {
            if (isEmpty()) {
                elements = newelements;
                return;
            }
            if (nextAdd <= nextRemove) {
                System.arraycopy(elements,nextRemove,newelements,0,this.capacity()-nextRemove);
                System.arraycopy(elements, 0, newelements, this.capacity()-nextRemove, nextAdd);
            } else {
                System.arraycopy(elements,nextRemove,newelements,0,nextAdd+1);
            }
            nextAdd = this.size();
            nextRemove=0;
            elements = newelements;
        } 
    }

    public void finalize() {
        if (TRACE_CREATE_AND_FINALIZE)
            log(this, "----------------------------------------FINALIZED",
					Server.MSG_STATE, Server.LVL_VERY_VERBOSE);
    }

	/**
	 * Logging method configured by the loglevel mechanism
	 * @param msg  the message to log
	 * @param type  the type of message (MSG_ prefixed konstants are used here)
	 * @param lvl  the level of attention to use here (LVL_ prefixed konstants are used here)
	 */
	public static void log(Object o, String msg, short type, short lvl) {
		StringBuffer sb = new StringBuffer();
		try {
			if (LOG_MASK[type].intValue() < lvl && !DEBUG)
				return;
			sb.append("[");
			sb.append(Server.formatDefaultTimeStamp(System.currentTimeMillis()));
			switch (lvl) {
			case LVL_MAJOR:
				sb.append("] MAJOR-| ");
				break;
			case LVL_HALT:
				sb.append("] HALT -| ");
				break;
			default:
				sb.append("]      -| ");
			}
			if (o != null) {
				sb.append(o.toString());
				sb.append(": ");
			}
			sb.append(msg);
			sb.append("\r\n");
			if ((type == MSG_CONFIG && LOGFILE[MSG_CONFIG].equals("console"))
					|| (type == MSG_AUTH && LOGFILE[MSG_AUTH].equals("console"))
					|| (type == MSG_STATE && LOGFILE[MSG_STATE]
							.equals("console"))
					|| (type == MSG_TRAFFIC && LOGFILE[MSG_TRAFFIC]
							.equals("console"))
					|| (type == MSG_ERROR && LOGFILE[MSG_ERROR]
							.equals("console"))) {
				System.out.print(sb.toString());
			} else {
				LogWriter.instance.addLogMessage(type, sb.toString());
			}
			if (lvl == LVL_HALT)
				System.exit(1);
		} catch (Exception e) {
			System.err.println("Server.log caused Exception for Message:");
			System.err.print(sb.toString());
			e.printStackTrace();
		}
	}

	public static String formatDefaultTimeStamp(long ts) {
		cal.setTimeInMillis(ts);
		return defaultDateFormat.format(cal.getTime());
	}

	public static boolean TRACE_CREATE_AND_FINALIZE = false;
	public static final short MSG_STATE = 2;
	public static final short LVL_VERY_VERBOSE = 4;
	public static Short LOG_MASK[] = new Short[7];
	public static boolean DEBUG = false;
	public static final short LVL_MAJOR = 1;
	public static final short LVL_HALT = 0;
	public static final short MSG_CONFIG = 0;
	/**
	 * LOGGING (will be moved to an extra object...
	 */
	public static String[] LOGFILE = { "console", "console", "console",
			"console", "console", "console", "console" };
	public static final short MSG_AUTH = 1;
	public static final short MSG_TRAFFIC = 3;
	public static final short MSG_ERROR = 4;
	public static Calendar cal = Calendar.getInstance();
	public static SimpleDateFormat defaultDateFormat = new SimpleDateFormat(
			"yyyy.MM.dd HH:mm:ss");
}
//*********************REFACTORED CODE ****************
