/**
 * Copyright (C) 2003  Manfred Andres
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package freecs.content;
import freecs.Server;
import freecs.core.*;
import freecs.util.logger.LogWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;

/**
 * Used to store values needed for a message and to
 * make it accessible to other methods (makes it possible
 * to move message-commands into seperate-classes)
 */
public class MessageState {
	public volatile boolean useRenderCache, moderated;
	public volatile Group sourceGroup, targetGroup;
	public volatile User sender, usercontext;
	public volatile String message, param, msg, reason;
	public volatile String msgTemplate;
	public volatile ConnectionBuffer cb;
    public MessageParser mp;
    public volatile Object[] usrList;

	public MessageState (MessageParser mp) {
        this.mp=mp;
		clear();
        if (TRACE_CREATE_AND_FINALIZE)
            log(this, "++++++++++++++++++++++++++++++++++++++++CREATE",
					Server.MSG_STATE, Server.LVL_VERY_VERBOSE);
	}
	
	public void clear() {
		sender=null;
		usercontext=null;
		message=null;
		reason=null;
		message=null;
		param=null;
		msg=null;
		msgTemplate=null;
		useRenderCache=true;
		moderated = false;
        usrList = null;
	}
    
    public void inhale (MessageState mst) {
        this.cb = mst.cb;
        this.message = mst.message;
        this.moderated = mst.moderated;
        this.msg = mst.msg;
        this.msgTemplate = mst.msgTemplate;
        this.reason = mst.reason;
        this.sender = mst.sender;
        this.sourceGroup = mst.sourceGroup;
        this.targetGroup = mst.targetGroup;
        this.usercontext = mst.usercontext;
        this.useRenderCache = mst.useRenderCache;
        this.usrList = mst.usrList;
    }
    
    public Object clone () {
        MessageState mst = new MessageState(this.mp);
        mst.cb = this.cb;
        mst.message = this.message;
        mst.moderated = this.moderated;
        mst.msg = this.msg;
        mst.msgTemplate = this.msgTemplate;
        mst.reason = this.reason;
        mst.sender = this.sender;
        mst.sourceGroup = this.sourceGroup;
        mst.targetGroup = this.targetGroup;
        mst.usercontext = this.usercontext;
        mst.useRenderCache = this.useRenderCache;
        mst.usrList = this.usrList;
        return mst;
    }

    public void finalize() {
        if (TRACE_CREATE_AND_FINALIZE)
            log(this, "----------------------------------------FINALIZED",
					Server.MSG_STATE, Server.LVL_VERY_VERBOSE);
    }

	/**
	 * Logging method configured by the loglevel mechanism
	 * @param msg  the message to log
	 * @param type  the type of message (MSG_ prefixed konstants are used here)
	 * @param lvl  the level of attention to use here (LVL_ prefixed konstants are used here)
	 */
	public static void log(Object o, String msg, short type, short lvl) {
		StringBuffer sb = new StringBuffer();
		try {
			if (LOG_MASK[type].intValue() < lvl && !DEBUG)
				return;
			sb.append("[");
			sb.append(Server.formatDefaultTimeStamp(System.currentTimeMillis()));
			switch (lvl) {
			case LVL_MAJOR:
				sb.append("] MAJOR-| ");
				break;
			case LVL_HALT:
				sb.append("] HALT -| ");
				break;
			default:
				sb.append("]      -| ");
			}
			if (o != null) {
				sb.append(o.toString());
				sb.append(": ");
			}
			sb.append(msg);
			sb.append("\r\n");
			if ((type == MSG_CONFIG && LOGFILE[MSG_CONFIG].equals("console"))
					|| (type == MSG_AUTH && LOGFILE[MSG_AUTH].equals("console"))
					|| (type == MSG_STATE && LOGFILE[MSG_STATE]
							.equals("console"))
					|| (type == MSG_TRAFFIC && LOGFILE[MSG_TRAFFIC]
							.equals("console"))
					|| (type == MSG_ERROR && LOGFILE[MSG_ERROR]
							.equals("console"))) {
				System.out.print(sb.toString());
			} else {
				LogWriter.instance.addLogMessage(type, sb.toString());
			}
			if (lvl == LVL_HALT)
				System.exit(1);
		} catch (Exception e) {
			System.err.println("Server.log caused Exception for Message:");
			System.err.print(sb.toString());
			e.printStackTrace();
		}
	}

	public static String formatDefaultTimeStamp(long ts) {
		cal.setTimeInMillis(ts);
		return defaultDateFormat.format(cal.getTime());
	}

	public static boolean TRACE_CREATE_AND_FINALIZE = false;
	public static final short MSG_STATE = 2;
	public static final short LVL_VERY_VERBOSE = 4;
	public static Short LOG_MASK[] = new Short[7];
	public static boolean DEBUG = false;
	public static final short LVL_MAJOR = 1;
	public static final short LVL_HALT = 0;
	public static final short MSG_CONFIG = 0;
	/**
	 * LOGGING (will be moved to an extra object...
	 */
	public static String[] LOGFILE = { "console", "console", "console",
			"console", "console", "console", "console" };
	public static final short MSG_AUTH = 1;
	public static final short MSG_TRAFFIC = 3;
	public static final short MSG_ERROR = 4;
	public static Calendar cal = Calendar.getInstance();
	public static SimpleDateFormat defaultDateFormat = new SimpleDateFormat(
			"yyyy.MM.dd HH:mm:ss");
}

//*********************REFACTORED CODE ****************
