/**
* The XMOJO Project 5
* Copyright © 2003 XMOJO.org. All rights reserved.

* NO WARRANTY

* BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR
* THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
* OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
* PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
* OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS
* TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE
* LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
* REPAIR OR CORRECTION.

* IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL
* ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE
* THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
* GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
* USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF
* DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
* PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE),
* EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
* SUCH DAMAGES.
**/

package javax.management;

//--------------------- Importing the Java packages -------------------------//
import java.util.Hashtable;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Vector;

import com.adventnet.jmx.MBeanServerImpl;
import com.adventnet.jmx.DefaultLoaderRepositoryExt;

import com.adventnet.agent.logging.Log;
import com.adventnet.agent.logging.LogFactory;

/**
 * Provides references to the MBeanServer objects and acts as a
 * factory for creating creating and releasing the references of
 * MBeanServer objects.
 */
public class MBeanServerFactory
{
	//--------------------------Variable Declaration-------------------------//

	/** The static list which maintains the MBeanServer instances **/
	private static ArrayList servers = new ArrayList();

	/** The default domain of the MBeanServer **/
	private static String defaultDomain = new String("DefaultDomain");

	private static final String DELEGATE_NAME = "JMImplementation:type=MBeanServerDelegate";

	private static Log log;

	/** Get Logger Instance **/
	static
	{
		try
		{
			log=LogFactory.getInstance("JMX");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	// the following is to prevent generation of default constructor
	// all the methods in this class are static methods
	private MBeanServerFactory()
    {
    }

	/**
	 * Return a new object implementing the MBeanServer interface with a
	 * standard default domain name. The default domain name is used as the
	 * domain part in the ObjectName of MBeans, if no domain is specified by
	 * the user.
	 * <br>
	 * The standard default domain name is "DefaultDomain". This can
	 * be got from MBeanServer.getDefaultDomain() method.
	 * <br>
     * The MBeanServer reference is internally kept. This will allows
	 * <CODE>findMBeanServer</CODE> to give back a reference to this
	 * newly MBeanServer object.
	 *
	 * @return This creates a new MBean server
	 */
	public static MBeanServer createMBeanServer()
	{
		return createMBeanServer(defaultDomain);
	}

	/**
	 * Return a new object implementing the MBeanServer interface with the
	 * specified default domain name. The default domain name is used as the
	 * domain part in the ObjectName of MBeans, if no domain is specified by the
	 * user is null.
     * <p>
     * The MBeanServer reference is internally kept. This will allows
	 * <CODE>findMBeanServer</CODE> to give back a reference to this newly
	 * MBeanServer object.
	 *
	 * @param domain The MBeanServer is created with this domain name
	 *
	 * @return This creates a new MBeanServer with the specified domain name
	 */
	public static MBeanServer createMBeanServer(String domain)
	{
		log.trace("Before creating the MBeanServer");
		MBeanServerImpl impl = new MBeanServerImpl(domain);

		synchronized(servers)
		{
			servers.add(impl);
		}

		log.trace("MBeanServer created and added");

		return impl;
	}

	/**
	 * Returns a new MBeanServer Object without storing the reference to the
	 * created object with standard default domain name. This domain will
	 * be  used as a part of the ObjectName while registering the MBeans.
	 * As no reference is kept, invoking the <CODE>findMBeanServer</CODE> will
	 * not give back reference to this newly created MBeanServer object, but
	 * this MBeanServer is eligible for Garbage Collection.
	 *
     * @param mbeanServer The newly created MbeanServer object.
	 */
	public static MBeanServer newMBeanServer()
	{
		return newMBeanServer(defaultDomain);
	}

	/**
	 * Returns a new MBeanServer Object without storing the reference to the
	 * created object with the specified domain name. This domain will
	 * be  used as a part of the ObjectName while registering the MBeans.
	 * As no reference is kept, invoking the <CODE>findMBeanServer</CODE> will
	 * not give back reference to this newly created MBeanServer object, but
	 * this MBeanServer is eligible for Garbage Collection.
	 *
     * @param mbeanServer The newly created MbeanServer object.
	 */
	public static MBeanServer newMBeanServer(String domain)
	{
		removeAllLoader();
		return new MBeanServerImpl(domain);
	}

	/**
	 * Releases all the internal references for a MBeanServer object, thus
	 * making the MBeanServer instance an eligible object for Garbage Collection.
	 *
     * @param mbeanServer The MbeanServer object to remove.
	 */
	public static void releaseMBeanServer(MBeanServer mbeanServer)
	{
		if(mbeanServer != null)
		{
			servers.remove(mbeanServer);
		}
		else
		{
			log.warn("MBeanServer could not be removed");
		}
	}

	/**
	 * Return a list of objects implementing the MBeanServer interface.
	 * This static method allows a user to retrieve references on MBeanServer
	 * which have been instantiated in the Java Virtual Machine.
	 *
     * @param agentId The agent identifier of the MBeanServer to retrieve.
	 * 				If this parameter is null, all MBeanServer present in
	 * 				the JVM are returned.
	 *
     * @return A list of MBeanServer object.
	 */
	public static ArrayList findMBeanServer(String agentId)
	{

		ArrayList toRet = new ArrayList();

		if(agentId == null)
		{
			return (ArrayList)(servers.clone());	//clone will help in not
													// scattering the references
		}
		else
		{
			// Going to browse through the ArrayList to find the respective
			// MBeanServer. This is a factory method ..so synchronization must
			// be done to avoid indiscrepancies.

			synchronized(servers)
			{
				for(int i=0; i<servers.size(); i++)
				{
					MBeanServer server = (MBeanServer)(servers.get(i));
					//check the server's id with that of the corresponding delegate
					try
					{
						String serverId = (String)(server.getAttribute(
							new ObjectName(DELEGATE_NAME), "MBeanServerId"));

						if(serverId.equals(agentId))
						{
							toRet.add(server);
						}
					}
					catch(Exception e)
					{
						log.error("Exception in findMBeanServer",e);
					}
				}

				return toRet;
			}
		}
	}

	public static void removeAllLoader() {
		loaders.removeAllElements();
	}

	/**
	 * List of class loaders 
	 */
	protected static Vector loaders = new Vector();
} // End of Class MBeanServerFactory.java
//*********************REFACTORED CODE ****************
