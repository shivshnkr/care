/*
 * $Header: /cvsroot/mvnforum/mvnforum/src/com/mvnforum/admin/ConfigurationWebHandler.java,v 1.128.2.5 2008/11/20 03:49:43 lexuanttkhtn Exp $
 * $Author: lexuanttkhtn $
 * $Revision: 1.128.2.5 $
 * $Date: 2008/11/20 03:49:43 $
 *
 * ====================================================================
 *
 * Copyright (C) 2002-2007 by MyVietnam.net
 *
 * All copyright notices regarding mvnForum MUST remain
 * intact in the scripts and in the outputted HTML.
 * The "powered by" text/logo with a link back to
 * http://www.mvnForum.com and http://www.MyVietnam.net in
 * the footer of the pages MUST remain visible when the pages
 * are viewed on the internet or intranet.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Support can be obtained from support forums at:
 * http://www.mvnForum.com/mvnforum/index
 *
 * Correspondence and Marketing Questions can be sent to:
 * info at MyVietnam net
 *
 * @author: Minh Nguyen
 * @author: Mai  Nguyen
 */
package com.mvnforum.admin;

import java.io.*;
import java.util.*;

import net.myvietnam.mvncore.MVNCoreConfig;
import net.myvietnam.mvncore.configuration.DOM4JConfiguration;
import net.myvietnam.mvncore.exception.BadInputException;
import net.myvietnam.mvncore.exception.DatabaseException;
import net.myvietnam.mvncore.security.FloodControl;
import net.myvietnam.mvncore.security.SecurityUtil;
import net.myvietnam.mvncore.service.*;
import net.myvietnam.mvncore.util.*;
import net.myvietnam.mvncore.web.GenericRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dom4j.*;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;

import com.mvnforum.*;
import com.mvnforum.auth.*;
import com.mvnforum.db.*;

import freemarker.template.*;

public class ConfigurationWebHandler {

    private static final Log log = LogFactory.getLog(ConfigurationWebHandler.class);
    private static EventLogService eventLogService = MvnCoreServiceFactory.getMvnCoreService().getEventLogService();

    private OnlineUserManager onlineUserManager = OnlineUserManager.getInstance();

    public ConfigurationWebHandler() {
    }

    public void prepareConfigMVNForum(GenericRequest request)
        throws IOException, DatabaseException, AuthenticationException {
        
        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();

        String strPathName = FileUtil.getServletClassesPath();
        DOM4JConfiguration mvnforumConfig;
        try {
            mvnforumConfig = new DOM4JConfiguration(new File(strPathName + "mvnforum.xml"));
        } catch (Exception ex) {
            log.error("Cannot load the DOM4JConfiguration.", ex);
            throw new IOException("Cannot load the DOM4JConfiguration.");
        }

        request.setAttribute("mvnforumConfig", mvnforumConfig);
    }

    public void prepareConfigMVNCore(GenericRequest request)
        throws IOException, DatabaseException, AuthenticationException {

        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();

        String strPathName = FileUtil.getServletClassesPath();
        DOM4JConfiguration mvncoreConfig;
        try {
            mvncoreConfig = new DOM4JConfiguration(new File(strPathName + "mvncore.xml"));
        } catch (Exception ex) {
            log.error("Cannot load the DOM4JConfiguration.", ex);
            throw new IOException("Cannot load the DOM4JConfiguration.");
        }

        request.setAttribute("mvncoreConfig", mvncoreConfig);
    }

    public void updateConfigStepOne(GenericRequest request)
        throws BadInputException, DocumentException, IOException,
        DatabaseException, AuthenticationException {

        SecurityUtil.checkHttpPostMethod(request);

        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();

        // now check the password
        MyUtil.ensureCorrectCurrentPassword(request);

        // Children of mvnforumConfig
        String mvnforum_home = GenericParamUtil.getParameterSafe(request, "mvnforum_home", true);
        String mvnforum_log = GenericParamUtil.getParameterSafe(request, "mvnforum_log", true);
        String webmaster_email = GenericParamUtil.getParameterEmail(request, "webmaster_email");
        String watch_email = GenericParamUtil.getParameterEmail(request, "watch_email");
        String logo_url = GenericParamUtil.getParameterSafe(request, "logo_url", true);
        String redirect_login_url = GenericParamUtil.getParameterSafe(request, "redirect_login_url", true);
        String redirect_logout_url = GenericParamUtil.getParameterSafe(request, "redirect_logout_url", true);
        String supported_locales = GenericParamUtil.getParameterSafe(request, "supported_locales", false);
        String default_locale_name = GenericParamUtil.getParameterSafe(request, "default_locale_name", true);
        String locale_parameter_name = GenericParamUtil.getParameterSafe(request, "locale_parameter_name", true);
        String default_guest_name = GenericParamUtil.getParameterSafe(request, "default_guest_name", true);
        int default_guest_timezone = GenericParamUtil.getParameterInt(request, "default_guest_timezone");
        int default_status_of_registered_member = GenericParamUtil.getParameterInt(request, "default_status_of_registered_member");
        boolean enable_register_rule = GenericParamUtil.getParameterBoolean(request, "enable_register_rule");

        boolean enable_cache_member = GenericParamUtil.getParameterBoolean(request, "enable_cache_member");
        boolean enable_cache_post = GenericParamUtil.getParameterBoolean(request, "enable_cache_post");
        boolean enable_cache_thread = GenericParamUtil.getParameterBoolean(request, "enable_cache_thread");
        boolean enable_cache_forum = GenericParamUtil.getParameterBoolean(request, "enable_cache_forum");
        boolean enable_cache_category = GenericParamUtil.getParameterBoolean(request, "enable_cache_category");

        boolean enable_passwordless_auth = GenericParamUtil.getParameterBoolean(request, "enable_passwordless_auth");
        boolean enable_login_info_in_cookie = GenericParamUtil.getParameterBoolean(request, "enable_login_info_in_cookie");
        boolean enable_login_info_in_session = GenericParamUtil.getParameterBoolean(request, "enable_login_info_in_session");
        boolean enable_login_info_in_realm = GenericParamUtil.getParameterBoolean(request, "enable_login_info_in_realm");
        boolean enable_login_info_in_customization = GenericParamUtil.getParameterBoolean(request, "enable_login_info_in_customization");
        boolean enable_friendly_url = GenericParamUtil.getParameterBoolean(request, "enable_friendly_url");
        boolean enable_check_invalid_session = GenericParamUtil.getParameterBoolean(request, "enable_check_invalid_session");
        boolean require_activation = GenericParamUtil.getParameterBoolean(request, "require_activation");
        boolean enable_login = GenericParamUtil.getParameterBoolean(request, "enable_login");
        boolean enable_new_member = GenericParamUtil.getParameterBoolean(request, "enable_new_member");
        boolean enable_new_post = GenericParamUtil.getParameterBoolean(request, "enable_new_post");
        boolean enable_rss = GenericParamUtil.getParameterBoolean(request, "enable_rss");
        boolean enable_watch = GenericParamUtil.getParameterBoolean(request, "enable_watch");
        boolean enable_attachment = GenericParamUtil.getParameterBoolean(request, "enable_attachment");
        boolean enable_avatar = GenericParamUtil.getParameterBoolean(request, "enable_avatar");
        boolean enable_emoticon = GenericParamUtil.getParameterBoolean(request, "enable_emoticon");
        boolean enable_captcha = GenericParamUtil.getParameterBoolean(request, "enable_captcha");
        boolean enable_portal_like_index_page = GenericParamUtil.getParameterBoolean(request, "enable_portal_like_index_page");

        boolean enable_search = GenericParamUtil.getParameterBoolean(request, "enable_search");
        boolean enable_online_users = GenericParamUtil.getParameterBoolean(request, "enable_online_users");
        boolean enable_duplicate_onlineusers = GenericParamUtil.getParameterBoolean(request, "enable_duplicate_onlineusers");
        boolean enable_invisible_users = GenericParamUtil.getParameterBoolean(request, "enable_invisible_users");
        boolean enable_listmembers = GenericParamUtil.getParameterBoolean(request, "enable_listmembers");
        boolean enable_show_last_login_of_current_member = GenericParamUtil.getParameterBoolean(request, "enable_show_last_login_of_current_member");
        boolean enable_show_last_login = GenericParamUtil.getParameterBoolean(request, "enable_show_last_login");
        boolean enable_auto_watching = GenericParamUtil.getParameterBoolean(request, "enable_auto_watching");

        boolean enable_show_birthday = GenericParamUtil.getParameterBoolean(request, "enable_show_birthday");
        boolean enable_show_gender = GenericParamUtil.getParameterBoolean(request, "enable_show_gender");
        boolean enable_show_address = GenericParamUtil.getParameterBoolean(request, "enable_show_address");
        boolean enable_show_city = GenericParamUtil.getParameterBoolean(request, "enable_show_city");
        boolean enable_show_state = GenericParamUtil.getParameterBoolean(request, "enable_show_state");
        boolean enable_show_country = GenericParamUtil.getParameterBoolean(request, "enable_show_country");
        boolean enable_show_phone = GenericParamUtil.getParameterBoolean(request, "enable_show_phone");
        boolean enable_show_mobile = GenericParamUtil.getParameterBoolean(request, "enable_show_mobile");
        boolean enable_show_fax = GenericParamUtil.getParameterBoolean(request, "enable_show_fax");
        boolean enable_show_career = GenericParamUtil.getParameterBoolean(request, "enable_show_career");
        boolean enable_show_homepage = GenericParamUtil.getParameterBoolean(request, "enable_show_homepage");
        boolean enable_show_cool_link_1 = GenericParamUtil.getParameterBoolean(request, "enable_show_cool_link_1");
        boolean enable_show_cool_link_2 = GenericParamUtil.getParameterBoolean(request, "enable_show_cool_link_2");
        boolean enable_show_yahoo = GenericParamUtil.getParameterBoolean(request, "enable_show_yahoo");
        boolean enable_show_aol = GenericParamUtil.getParameterBoolean(request, "enable_show_aol");
        boolean enable_show_icq = GenericParamUtil.getParameterBoolean(request, "enable_show_icq");
        boolean enable_show_msn = GenericParamUtil.getParameterBoolean(request, "enable_show_msn");
        boolean enable_show_join_date = GenericParamUtil.getParameterBoolean(request, "enable_show_join_date");
        boolean enable_show_post_count = GenericParamUtil.getParameterBoolean(request, "enable_show_post_count");
        boolean enable_show_online_status = GenericParamUtil.getParameterBoolean(request, "enable_show_online_status");
        boolean enable_show_lastname = GenericParamUtil.getParameterBoolean(request, "enable_show_lastname");
        boolean enable_show_firstname = GenericParamUtil.getParameterBoolean(request, "enable_show_firstname");
        boolean enable_show_view_count = GenericParamUtil.getParameterBoolean(request, "enable_show_view_count");
        boolean enable_show_email = GenericParamUtil.getParameterBoolean(request, "enable_show_email");

        boolean enable_use_popup_menu_in_viewthread = GenericParamUtil.getParameterBoolean(request, "enable_use_popup_menu_in_viewthread");
        boolean enable_split_thread = GenericParamUtil.getParameterBoolean(request, "enable_split_thread");
        boolean enable_listunansweredthreads = GenericParamUtil.getParameterBoolean(request, "enable_listunansweredthreads");
        boolean enable_list_users_browsing_thread = GenericParamUtil.getParameterBoolean(request, "enable_list_users_browsing_thread");
        boolean enable_email_to_admin_content_with_censored_words = GenericParamUtil.getParameterBoolean(request, "enable_email_to_admin_content_with_censored_words");
        boolean enable_guest_view_listusers = GenericParamUtil.getParameterBoolean(request, "enable_guest_view_listusers");
        boolean only_normal_thread_type_in_active_threads = GenericParamUtil.getParameterBoolean(request, "only_normal_thread_type_in_active_threads");
        boolean send_watchmail_as_html = GenericParamUtil.getParameterBoolean(request, "send_watchmail_as_html");
        boolean enable_easy_watching = GenericParamUtil.getParameterBoolean(request, "enable_easy_watching");
        boolean enable_send_watch_mail_of_my_own_post = GenericParamUtil.getParameterBoolean(request, "enable_send_watch_mail_of_my_own_post");
        int max_last_post_body_in_watch = GenericParamUtil.getParameterInt(request, "max_last_post_body_in_watch");
        
        boolean enable_private_message = GenericParamUtil.getParameterBoolean(request, "enable_private_message");
        boolean enable_public_message = GenericParamUtil.getParameterBoolean(request, "enable_public_message");
        boolean enable_message_attachment = GenericParamUtil.getParameterBoolean(request, "enable_message_attachment");
        boolean enable_most_active_threads = GenericParamUtil.getParameterBoolean(request, "enable_most_active_threads");
        boolean enable_most_active_members = GenericParamUtil.getParameterBoolean(request, "enable_most_active_members");
        boolean enable_site_statistics_overview = GenericParamUtil.getParameterBoolean(request, "enable_site_statistics_overview");
        boolean enable_admin_can_change_password = GenericParamUtil.getParameterBoolean(request, "enable_admin_can_change_password");
        boolean enable_guest_view_image_attachment = GenericParamUtil.getParameterBoolean(request, "enable_guest_view_image_attachment");
        boolean enable_expanse_category_tree_by_default = GenericParamUtil.getParameterBoolean(request, "enable_expanse_category_tree_by_default");

        boolean enable_encrypt_password_on_browser = GenericParamUtil.getParameterBoolean(request, "enable_encrypt_password_on_browser");
        boolean enable_external_user_database = GenericParamUtil.getParameterBoolean(request, "enable_external_user_database");
        int days_to_show_recent_members = GenericParamUtil.getParameterInt(request, "days_to_show_recent_members");
        boolean enable_list_new_members_in_recent_days = GenericParamUtil.getParameterBoolean(request, "enable_list_new_members_in_recent_days");
        boolean enable_list_users_browsing_forum = GenericParamUtil.getParameterBoolean(request, "enable_list_users_browsing_forum");
        boolean enable_email_threatening_content = GenericParamUtil.getParameterBoolean(request, "enable_email_threatening_content");
        boolean have_internet = GenericParamUtil.getParameterBoolean(request, "have_internet");
        String event_log_locale = GenericParamUtil.getParameterSafe(request, "event_log_locale", true);
        int default_category_id = GenericParamUtil.getParameterInt(request, "default_category_id");
        int default_watch_type = GenericParamUtil.getParameterInt(request, "default_watch_type");

        int default_watch_option = GenericParamUtil.getParameterInt(request, "default_watch_option");
        int default_moderation_option = GenericParamUtil.getParameterInt(request, "default_moderation_option");
        
        boolean enable_image_thumbnail = GenericParamUtil.getParameterBoolean(request, "enable_image_thumbnail");
        int image_thumbnail_width = 0;
        int image_thumbnail_height = 0;
        if (enable_image_thumbnail) {
            image_thumbnail_width = GenericParamUtil.getParameterInt(request, "image_thumbnail_width");
            image_thumbnail_height = GenericParamUtil.getParameterInt(request, "image_thumbnail_height");
        }
        
        // children of mvnforumfactoryconfig
        String member_implementation = GenericParamUtil.getParameterSafe(request, "member_implementation", true);
        String onlineuser_implementation = GenericParamUtil.getParameterSafe(request, "onlineuser_implementation", true);
        String authenticator_implementation = GenericParamUtil.getParameterSafe(request, "authenticator_implementation", false);
        String requestprocessor_implementation = GenericParamUtil.getParameterSafe(request, "requestprocessor_implementation", true);
        String lucene_analyzer_implementation = GenericParamUtil.getParameterSafe(request, "lucene_analyzer_implementation", true);
        String mvnforum_service_implementation = GenericParamUtil.getParameterSafe(request, "mvnforum_service_implementation", true);
        String mvn_auth_service_implementation = GenericParamUtil.getParameterSafe(request, "mvn_auth_service_implementation", true);

        WatchBean.validateWatchOption(default_watch_option);
        ForumBean.validateForumModerationMode(default_moderation_option);
        MemberBean.validateMemberStatus(default_status_of_registered_member);
        WatchBean.validateWatchType(default_watch_type);
        
        // Now checking the validity of value
        Locale locale = onlineUser.getLocale();

        try {
            // Create a directory if it does not exist
            FileUtil.createDirs(mvnforum_home, true);

            String tempFilename = mvnforum_home + File.separatorChar + "mvnforum_tempfile.tmp";
            File tempFile = new File(tempFilename);
            if (log.isDebugEnabled()) {
                log.debug("Temp file = " + tempFilename);
                log.debug("Absolute filename of temp file = " + tempFile.getAbsolutePath());
            }

            FileOutputStream fos = new FileOutputStream(tempFilename);
            fos.write(tempFilename.getBytes());
            fos.close();

            tempFile.delete();
        } catch (IOException ex) {
            String errorMessage = "Check your mvnforum_home. Detail : " + ex.getMessage();
            throw new BadInputException(errorMessage);
        }

        try {
            int lastBackSlashIndex = mvnforum_log.lastIndexOf('\\');
            int lastForwardSlashIndex = mvnforum_log.lastIndexOf('/');
            int index = Math.max(lastBackSlashIndex, lastForwardSlashIndex);
            if (index < 0) {
                throw new BadInputException("Cannot find any '\\' or '/' in mvnforum_log : " + mvnforum_log);
            }
            String parentFolder = mvnforum_log.substring(0, index);
            log.debug("parentFolder = " + parentFolder);

            // always create a dir, if the dir already exitsted, nothing happens
            FileUtil.createDirs(parentFolder, true);

            String tempFilename = parentFolder + File.separatorChar + "mvnforum_tempfile.tmp";
            File tempFile = new File(tempFilename);
            if (log.isDebugEnabled()) {
                log.debug("Temp file in log folder = " + tempFilename);
                log.debug("Absolute filename of temp file in log folder = " + tempFile.getAbsolutePath());
            }

            FileOutputStream fos = new FileOutputStream(tempFilename);
            fos.write(tempFilename.getBytes());
            fos.close();

            tempFile.delete();
        } catch (IOException ex) {
            String errorMessage = "Check your mvnforum_log. Detail : " + ex.getMessage();
            throw new BadInputException(errorMessage);
        }

        MyUtil.checkClassName(locale, member_implementation, true);
        MyUtil.checkClassName(locale, onlineuser_implementation, true);
        MyUtil.checkClassName(locale, authenticator_implementation, false);
        MyUtil.checkClassName(locale, requestprocessor_implementation, true);
        MyUtil.checkClassName(locale, lucene_analyzer_implementation, true);
        MyUtil.checkClassName(locale, mvnforum_service_implementation, true);
        MyUtil.checkClassName(locale, mvn_auth_service_implementation, true);


        // End checking, now save the value
        String strPathName = FileUtil.getServletClassesPath();
        SAXReader reader = new SAXReader();
        Document document = reader.read(new File(strPathName + "mvnforum.xml"));
        Element root = document.getRootElement();
        String rootName = "/" + root.getName() + "/";
        
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/mvnforum_home", mvnforum_home);
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/mvnforum_log", mvnforum_log);
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/webmaster_email", webmaster_email);
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/watch_email", watch_email);
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/logo_url", logo_url);
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/redirect_login_url", redirect_login_url);
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/redirect_logout_url", redirect_logout_url);
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/supported_locales", supported_locales);
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/default_locale_name", default_locale_name);
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/locale_parameter_name", locale_parameter_name);
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/default_guest_name", default_guest_name);
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/default_guest_timezone", String.valueOf(default_guest_timezone));
        
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_cache_member", String.valueOf(enable_cache_member));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_cache_post", String.valueOf(enable_cache_post));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_cache_thread", String.valueOf(enable_cache_thread));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_cache_forum", String.valueOf(enable_cache_forum));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_cache_category", String.valueOf(enable_cache_category));
        
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_passwordless_auth", String.valueOf(enable_passwordless_auth));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_login_info_in_cookie", String.valueOf(enable_login_info_in_cookie));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_login_info_in_session", String.valueOf(enable_login_info_in_session));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_login_info_in_realm", String.valueOf(enable_login_info_in_realm));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_login_info_in_customization", String.valueOf(enable_login_info_in_customization));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_friendly_url", String.valueOf(enable_friendly_url));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_check_invalid_session", String.valueOf(enable_check_invalid_session));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_activation", String.valueOf(require_activation));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_login", String.valueOf(enable_login));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_new_member", String.valueOf(enable_new_member));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_new_post", String.valueOf(enable_new_post));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_rss", String.valueOf(enable_rss));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_watch", String.valueOf(enable_watch));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_attachment", String.valueOf(enable_attachment));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_avatar", String.valueOf(enable_avatar));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_emoticon", String.valueOf(enable_emoticon));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_captcha", String.valueOf(enable_captcha));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_portal_like_index_page", String.valueOf(enable_portal_like_index_page));
        
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_search", String.valueOf(enable_search));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_online_users", String.valueOf(enable_online_users));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_duplicate_onlineusers", String.valueOf(enable_duplicate_onlineusers));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_invisible_users", String.valueOf(enable_invisible_users));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_listmembers", String.valueOf(enable_listmembers));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_last_login_of_current_member", String.valueOf(enable_show_last_login_of_current_member));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_last_login", String.valueOf(enable_show_last_login));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_auto_watching", String.valueOf(enable_auto_watching));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_birthday", String.valueOf(enable_show_birthday));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_gender", String.valueOf(enable_show_gender));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_address", String.valueOf(enable_show_address));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_city", String.valueOf(enable_show_city));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_state", String.valueOf(enable_show_state));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_country", String.valueOf(enable_show_country));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_phone", String.valueOf(enable_show_phone));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_mobile", String.valueOf(enable_show_mobile));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_fax", String.valueOf(enable_show_fax));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_career", String.valueOf(enable_show_career));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_homepage", String.valueOf(enable_show_homepage));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_cool_link_1", String.valueOf(enable_show_cool_link_1));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_cool_link_2", String.valueOf(enable_show_cool_link_2));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_yahoo", String.valueOf(enable_show_yahoo));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_aol", String.valueOf(enable_show_aol));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_msn", String.valueOf(enable_show_msn));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_icq", String.valueOf(enable_show_icq));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_join_date", String.valueOf(enable_show_join_date));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_post_count", String.valueOf(enable_show_post_count));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_online_status", String.valueOf(enable_show_online_status));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_lastname", String.valueOf(enable_show_lastname));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_firstname", String.valueOf(enable_show_firstname));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_view_count", String.valueOf(enable_show_view_count));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_show_email", String.valueOf(enable_show_email));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_use_popup_menu_in_viewthread", String.valueOf(enable_use_popup_menu_in_viewthread));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_split_thread", String.valueOf(enable_split_thread));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_listunansweredthreads", String.valueOf(enable_listunansweredthreads));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_list_users_browsing_thread", String.valueOf(enable_list_users_browsing_thread));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_email_to_admin_content_with_censored_words", String.valueOf(enable_email_to_admin_content_with_censored_words));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_guest_view_listusers", String.valueOf(enable_guest_view_listusers));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/only_normal_thread_type_in_active_threads", String.valueOf(only_normal_thread_type_in_active_threads));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/send_watchmail_as_html", String.valueOf(send_watchmail_as_html));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_easy_watching", String.valueOf(enable_easy_watching));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_send_watch_mail_of_my_own_post", String.valueOf(enable_send_watch_mail_of_my_own_post));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_last_post_body_in_watch", String.valueOf(max_last_post_body_in_watch));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_private_message", String.valueOf(enable_private_message));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_public_message", String.valueOf(enable_public_message));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_message_attachment", String.valueOf(enable_message_attachment));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_most_active_threads", String.valueOf(enable_most_active_threads));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_most_active_members", String.valueOf(enable_most_active_members));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_site_statistics_overview", String.valueOf(enable_site_statistics_overview));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_admin_can_change_password", String.valueOf(enable_admin_can_change_password));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_guest_view_image_attachment", String.valueOf(enable_guest_view_image_attachment));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_expanse_category_tree_by_default", String.valueOf(enable_expanse_category_tree_by_default));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/default_watch_option", String.valueOf(default_watch_option));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/default_moderation_option", String.valueOf(default_moderation_option));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_encrypt_password_on_browser", String.valueOf(enable_encrypt_password_on_browser));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_external_user_database", String.valueOf(enable_external_user_database));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/days_to_show_recent_members", String.valueOf(days_to_show_recent_members));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_list_new_members_in_recent_days", String.valueOf(enable_list_new_members_in_recent_days));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_list_users_browsing_forum", String.valueOf(enable_list_users_browsing_forum));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_email_threatening_content", String.valueOf(enable_email_threatening_content));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/have_internet", String.valueOf(have_internet));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/event_log_locale", String.valueOf(event_log_locale));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/default_category_id", String.valueOf(default_category_id));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/default_watch_type", String.valueOf(default_watch_type));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/default_status_of_registered_member", String.valueOf(default_status_of_registered_member));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_register_rule", String.valueOf(enable_register_rule));
        
        //  children of image_thumbnail
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/image_thumbnail/enable", String.valueOf(enable_image_thumbnail));
        if (enable_image_thumbnail) {
            XMLUtil.updateNode(root, rootName + "mvnforumconfig/image_thumbnail/width", String.valueOf(image_thumbnail_width));
            XMLUtil.updateNode(root, rootName + "mvnforumconfig/image_thumbnail/height", String.valueOf(image_thumbnail_height));
        }
                        
        // children of mvnforumfactoryconfig
        XMLUtil.updateNode(root, rootName + "mvnforumfactoryconfig/member_implementation", member_implementation);
        XMLUtil.updateNode(root, rootName + "mvnforumfactoryconfig/onlineuser_implementation", onlineuser_implementation);
        XMLUtil.updateNode(root, rootName + "mvnforumfactoryconfig/authenticator_implementation", authenticator_implementation);
        XMLUtil.updateNode(root, rootName + "mvnforumfactoryconfig/requestprocessor_implementation", requestprocessor_implementation);
        XMLUtil.updateNode(root, rootName + "mvnforumfactoryconfig/lucene_analyzer_implementation", lucene_analyzer_implementation);
        XMLUtil.updateNode(root, rootName + "mvnforumfactoryconfig/mvnforum_service_implementation", mvnforum_service_implementation);
        XMLUtil.updateNode(root, rootName + "mvnforumfactoryconfig/mvn_auth_service_implementation", mvn_auth_service_implementation);

        saveDocument(document, strPathName + "mvnforum.xml");
        reload();
        request.setAttribute("step", "1");
        
        String actionDesc = MVNForumResourceBundle.getString(getEventLogLocale(), "mvnforum.eventlog.desc.UpdateConfigStep", new Object[]{new Integer(1)});
        eventLogService.logEvent(onlineUser.getMemberName(), request.getRemoteAddr(), MVNForumConstant.EVENT_LOG_MAIN_MODULE, MVNForumConstant.EVENT_LOG_SUB_MODULE_ADMIN, "update config step one", actionDesc, EventLogService.HIGH);

    }

    public void updateConfigStepTwo(GenericRequest request)
        throws BadInputException, DocumentException, IOException,
        DatabaseException, AuthenticationException {

        SecurityUtil.checkHttpPostMethod(request);

        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();

        // now check the password
        MyUtil.ensureCorrectCurrentPassword(request);

        int max_private_message = GenericParamUtil.getParameterUnsignedInt(request, "max_private_message");
        String max_message_attachment_size = GenericParamUtil.getParameterSafe(request, "max_message_attachment_size", true);
        String max_attachment_size = GenericParamUtil.getParameterSafe(request, "max_attachment_size", true);
        int max_favorite_thread = GenericParamUtil.getParameterUnsignedInt(request, "max_favorite_thread");
        int max_edit_days = GenericParamUtil.getParameterUnsignedInt(request, "max_edit_days");
        int max_attach_days = GenericParamUtil.getParameterUnsignedInt(request, "max_attach_days");
        int max_delete_days = GenericParamUtil.getParameterUnsignedInt(request, "max_delete_days");
        int rows_per_page = GenericParamUtil.getParameterUnsignedInt(request, "rows_per_page");
        int rows_per_rss = GenericParamUtil.getParameterUnsignedInt(request, "rows_per_rss");
        int hot_topic_threshold = GenericParamUtil.getParameterUnsignedInt(request, "hot_topic_threshold");

        int max_http_requests_per_hour_per_ip = GenericParamUtil.getParameterUnsignedInt(request, "max_http_requests_per_hour_per_ip");
        int max_posts_per_hour_per_ip = GenericParamUtil.getParameterUnsignedInt(request, "max_posts_per_hour_per_ip");
        int max_members_per_hour_per_ip = GenericParamUtil.getParameterUnsignedInt(request, "max_members_per_hour_per_ip");
        int max_logins_per_hour_per_ip = GenericParamUtil.getParameterUnsignedInt(request, "max_logins_per_hour_per_ip");
        int max_messages_per_hour_per_ip = GenericParamUtil.getParameterUnsignedInt(request, "max_messages_per_hour_per_ip");
        int max_password_days = GenericParamUtil.getParameterUnsignedInt(request, "max_password_days");
        int max_posts_per_hour_per_member = GenericParamUtil.getParameterUnsignedInt(request, "max_posts_per_hour_per_member");
        
        int max_chars_in_short_summary = GenericParamUtil.getParameterUnsignedInt(request, "max_chars_in_short_summary");
        int max_chars_in_long_summary = GenericParamUtil.getParameterUnsignedInt(request, "max_chars_in_long_summary");
        int max_chars_in_rss = GenericParamUtil.getParameterUnsignedInt(request, "max_chars_in_rss");

        boolean enable_backup_on_server = GenericParamUtil.getParameterBoolean(request, "enable_backup_on_server");
        int max_import_size = GenericParamUtil.getParameterUnsignedInt(request, "max_import_size");

        String strPathName = FileUtil.getServletClassesPath();
        SAXReader reader = new SAXReader();
        Document document = reader.read(new File(strPathName + "mvnforum.xml"));
        Element root = document.getRootElement();
        String rootName = "/" + root.getName() + "/";
        
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_private_message", String.valueOf(max_private_message));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_message_attachment_size", String.valueOf(max_message_attachment_size));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_attachment_size", String.valueOf(max_attachment_size));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_favorite_thread", String.valueOf(max_favorite_thread));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_edit_days", String.valueOf(max_edit_days));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_attach_days", String.valueOf(max_attach_days));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_delete_days", String.valueOf(max_delete_days));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/rows_per_page", String.valueOf(rows_per_page));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/rows_per_rss", String.valueOf(rows_per_rss));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/hot_topic_threshold", String.valueOf(hot_topic_threshold));
        
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_http_requests_per_hour_per_ip", String.valueOf(max_http_requests_per_hour_per_ip));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_posts_per_hour_per_ip", String.valueOf(max_posts_per_hour_per_ip));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_members_per_hour_per_ip", String.valueOf(max_members_per_hour_per_ip));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_logins_per_hour_per_ip", String.valueOf(max_logins_per_hour_per_ip));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_messages_per_hour_per_ip", String.valueOf(max_messages_per_hour_per_ip));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_password_days", String.valueOf(max_password_days));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_posts_per_hour_per_member", String.valueOf(max_posts_per_hour_per_member));
        
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_chars_in_short_summary", String.valueOf(max_chars_in_short_summary));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_chars_in_long_summary", String.valueOf(max_chars_in_long_summary));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_chars_in_rss", String.valueOf(max_chars_in_rss));
        
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/enable_backup_on_server", String.valueOf(enable_backup_on_server));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/max_import_size", String.valueOf(max_import_size));

        saveDocument(document, strPathName + "mvnforum.xml");
        reload();
        request.setAttribute("step", "2");
        
        String actionDesc = MVNForumResourceBundle.getString(getEventLogLocale(), "mvnforum.eventlog.desc.UpdateConfigStep", new Object[]{new Integer(2)});
        eventLogService.logEvent(onlineUser.getMemberName(), request.getRemoteAddr(), MVNForumConstant.EVENT_LOG_MAIN_MODULE, MVNForumConstant.EVENT_LOG_SUB_MODULE_ADMIN, "update config step two", actionDesc, EventLogService.HIGH);

    }

    public void updateConfigStepThree(GenericRequest request)
        throws BadInputException, DocumentException, IOException,
        DatabaseException, AuthenticationException {

        SecurityUtil.checkHttpPostMethod(request);

        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();

        // now check the password
        MyUtil.ensureCorrectCurrentPassword(request);

        boolean require_register_firstname = GenericParamUtil.getParameterBoolean(request, "require_register_firstname");
        boolean require_register_lastname = GenericParamUtil.getParameterBoolean(request, "require_register_lastname");
        boolean require_register_gender = GenericParamUtil.getParameterBoolean(request, "require_register_gender");
        boolean require_register_birthday = GenericParamUtil.getParameterBoolean(request, "require_register_birthday");
        boolean require_register_address = GenericParamUtil.getParameterBoolean(request, "require_register_address");
        boolean require_register_city = GenericParamUtil.getParameterBoolean(request, "require_register_city");
        boolean require_register_state = GenericParamUtil.getParameterBoolean(request, "require_register_state");
        boolean require_register_country = GenericParamUtil.getParameterBoolean(request, "require_register_country");
        boolean require_register_phone = GenericParamUtil.getParameterBoolean(request, "require_register_phone");
        boolean require_register_mobile = GenericParamUtil.getParameterBoolean(request, "require_register_mobile");
        boolean require_register_fax = GenericParamUtil.getParameterBoolean(request, "require_register_fax");
        boolean require_register_career = GenericParamUtil.getParameterBoolean(request, "require_register_career");
        boolean require_register_homepage = GenericParamUtil.getParameterBoolean(request, "require_register_homepage");
        boolean require_register_yahoo = GenericParamUtil.getParameterBoolean(request, "require_register_yahoo");
        boolean require_register_aol = GenericParamUtil.getParameterBoolean(request, "require_register_aol");
        boolean require_register_icq = GenericParamUtil.getParameterBoolean(request, "require_register_icq");
        boolean require_register_msn = GenericParamUtil.getParameterBoolean(request, "require_register_msn");
        boolean require_register_link_1 = GenericParamUtil.getParameterBoolean(request, "require_register_link_1");
        boolean require_register_link_2 = GenericParamUtil.getParameterBoolean(request, "require_register_link_2");

        String strPathName = FileUtil.getServletClassesPath();
        SAXReader reader = new SAXReader();
        Document document = reader.read(new File(strPathName + "mvnforum.xml"));
        Element root = document.getRootElement();
        String rootName = "/" + root.getName() + "/";
        
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_firstname", String.valueOf(require_register_firstname));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_lastname", String.valueOf(require_register_lastname));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_gender", String.valueOf(require_register_gender));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_birthday", String.valueOf(require_register_birthday));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_address", String.valueOf(require_register_address));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_city", String.valueOf(require_register_city));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_state", String.valueOf(require_register_state));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_country", String.valueOf(require_register_country));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_phone", String.valueOf(require_register_phone));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_mobile", String.valueOf(require_register_mobile));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_fax", String.valueOf(require_register_fax));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_career", String.valueOf(require_register_career));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_homepage", String.valueOf(require_register_homepage));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_yahoo", String.valueOf(require_register_yahoo));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_aol", String.valueOf(require_register_aol));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_icq", String.valueOf(require_register_icq));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_msn", String.valueOf(require_register_msn));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_link_1", String.valueOf(require_register_link_1));
        XMLUtil.updateNode(root, rootName + "mvnforumconfig/require_register_link_2", String.valueOf(require_register_link_2));

        saveDocument(document, strPathName + "mvnforum.xml");
        reload();
        request.setAttribute("step", "3");
        
        String actionDesc = MVNForumResourceBundle.getString(getEventLogLocale(), "mvnforum.eventlog.desc.UpdateConfigStep", new Object[]{new Integer(3)});
        eventLogService.logEvent(onlineUser.getMemberName(), request.getRemoteAddr(), MVNForumConstant.EVENT_LOG_MAIN_MODULE, MVNForumConstant.EVENT_LOG_SUB_MODULE_ADMIN, "update config step three", actionDesc, EventLogService.HIGH);

    }

    public void updateConfigMVNCore(GenericRequest request)
        throws BadInputException, DocumentException, IOException,
        DatabaseException, AuthenticationException {

        SecurityUtil.checkHttpPostMethod(request);

        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();

        // now check the password
        MyUtil.ensureCorrectCurrentPassword(request);

        boolean isUseDatasource = GenericParamUtil.getParameterBoolean(request, "use_datasource");

        int database_type = 0;
        String driver_class_name = "";
        String database_url = "";
        String database_user = "";
        String database_password = "";
        int max_connection = 0;
        int max_time_to_wait = 0;
        int minutes_between_refresh = 0;
        String datasource_name = "";

        database_type = GenericParamUtil.getParameterUnsignedInt(request, "database_type");
        if (isUseDatasource == false) {
            driver_class_name = GenericParamUtil.getParameterSafe(request, "driver_class_name", true);
            database_url = GenericParamUtil.getParameterSafe(request, "database_url", true);
            database_user = GenericParamUtil.getParameterSafe(request, "database_user", true);
            database_password = GenericParamUtil.getParameterSafe(request, "database_password", false);
            max_connection = GenericParamUtil.getParameterUnsignedInt(request, "max_connection");
            max_time_to_wait = GenericParamUtil.getParameterUnsignedInt(request, "max_time_to_wait");
            minutes_between_refresh = GenericParamUtil.getParameterUnsignedInt(request, "minutes_between_refresh");
        } else {
            datasource_name = GenericParamUtil.getParameterSafe(request, "datasource_name", false);
        }

        String default_mail_from = GenericParamUtil.getParameterEmail(request, "default_mail_from");

        boolean isReceiveUseMailsource = GenericParamUtil.getParameterBoolean(request, "receive_mail_enable_mail_source");
        boolean isSendUseMailsource = GenericParamUtil.getParameterBoolean(request, "send_mail_enable_mail_source");
        boolean isSendUseSMTPServer = GenericParamUtil.getParameterBoolean(request, "send_mail_use_embeded_smtp_mail_server");
        boolean isSendUseSecureConnection = false;

        String receive_mail_source_name = "";
        String receive_mail_server = "";
        String receive_mail_username = "";
        String receive_mail_password = "";
        int receive_mail_port =0;

        String send_mail_source_name = "";
        String send_mail_server = "";
        String send_mail_username = "";
        String send_mail_password = "";
        int send_mail_port = 0;

        if (isReceiveUseMailsource == false) {
            receive_mail_server = GenericParamUtil.getParameterSafe(request, "receive_mail_server", true);
            receive_mail_username = GenericParamUtil.getParameterSafe(request, "receive_mail_username", false);
            receive_mail_password = GenericParamUtil.getParameterSafe(request, "receive_mail_password", false);
            receive_mail_port = GenericParamUtil.getParameterUnsignedInt(request, "receive_mail_port");
        } else {
            receive_mail_source_name = GenericParamUtil.getParameterSafe(request, "receive_mail_source_name", true);
        }
        if (isSendUseSMTPServer) {
            // do nothing
        } else if (isSendUseMailsource) {
            send_mail_source_name = GenericParamUtil.getParameterSafe(request, "send_mail_source_name", true);
        } else {
            isSendUseSecureConnection = GenericParamUtil.getParameterBoolean(request, "send_mail_use_secure_connection");
            send_mail_server = GenericParamUtil.getParameterSafe(request, "send_mail_server", true);
            send_mail_username = GenericParamUtil.getParameterSafe(request, "send_mail_username", false);
            send_mail_password = GenericParamUtil.getParameterSafe(request, "send_mail_password", false);
            send_mail_port = GenericParamUtil.getParameterUnsignedInt(request, "send_mail_port");
        }

        String context_path = GenericParamUtil.getParameterSafe(request, "context_path", false);
        String server_path = GenericParamUtil.getParameterSafe(request, "server_path", true);

        int server_hour_offset = GenericParamUtil.getParameterInt(request, "server_hour_offset");
        if (server_hour_offset < -13 || server_hour_offset > 13) {
            server_hour_offset = 0;
        }

        String blocked_user_agent = GenericParamUtil.getParameterSafe(request, "blocked_user_agent", false);

        String timermanager_datasource = GenericParamUtil.getParameterSafe(request, "timermanager_datasource", false);
        boolean enable_link_nofollow = GenericParamUtil.getParameterBoolean(request, "enable_link_nofollow");
        boolean enable_encode_url = GenericParamUtil.getParameterBoolean(request, "enable_encode_url");

        String portal_type = GenericParamUtil.getParameterSafe(request, "portal_type", true);
        String allow_http_referer_prefix_list = GenericParamUtil.getParameterSafe(request, "allow_http_referer_prefix_list", false);
        String mvncoreservice_implementation = GenericParamUtil.getParameterSafe(request, "mvncoreservice_implementation", true);
        String timertaskext_implementation_list = GenericParamUtil.getParameterSafe(request, "timertaskext_implementation_list", false);

        String mailinterceptor_implementation = GenericParamUtil.getParameterSafe(request, "mailinterceptor_implementation", false);
        String contentinterceptor_implementation = GenericParamUtil.getParameterSafe(request, "contentinterceptor_implementation", false);
        String loginidinterceptor_implementation = GenericParamUtil.getParameterSafe(request, "loginidinterceptor_implementation", false);
        String passwordinterceptor_implementation = GenericParamUtil.getParameterSafe(request, "passwordinterceptor_implementation", false);
        
        // Now checking the validity of value
        Locale locale = onlineUser.getLocale();
        if (isUseDatasource == false) {
            MyUtil.checkClassName(locale, driver_class_name, true);
        }

        MyUtil.checkClassName(locale, mvncoreservice_implementation, true);
        
        String[] timerTaskExtImplList = timertaskext_implementation_list.split(";");
        for (int i = 0; i < timerTaskExtImplList.length; i++) {
            MyUtil.checkClassName(locale, timerTaskExtImplList[i], false);
        }

        MyUtil.checkClassName(locale, mailinterceptor_implementation, false);
        MyUtil.checkClassName(locale, contentinterceptor_implementation, false);
        MyUtil.checkClassName(locale, loginidinterceptor_implementation, false);
        MyUtil.checkClassName(locale, passwordinterceptor_implementation, false);

        // End checking, now save the value
        String strPathName = FileUtil.getServletClassesPath();
        SAXReader reader = new SAXReader();
        Document document = reader.read(new File(strPathName + "mvncore.xml"));
        Element root = document.getRootElement();
        String rootName = "/" + root.getName() + "/";
        
        XMLUtil.updateNode(root, rootName + "dboptions/database_type", String.valueOf(database_type));
        XMLUtil.updateNode(root, rootName + "dboptions/use_datasource", String.valueOf(isUseDatasource));
        if (isUseDatasource == false) {
            XMLUtil.updateNode(root, rootName + "dboptions/driver_class_name", driver_class_name);
            XMLUtil.updateNode(root, rootName + "dboptions/database_url", database_url);
            XMLUtil.updateNode(root, rootName + "dboptions/database_user", database_user);
            XMLUtil.updateNode(root, rootName + "dboptions/database_password", database_password);
            XMLUtil.updateNode(root, rootName + "dboptions/max_connection", String.valueOf(max_connection));
            XMLUtil.updateNode(root, rootName + "dboptions/max_time_to_wait", String.valueOf(max_time_to_wait));
            XMLUtil.updateNode(root, rootName + "dboptions/minutes_between_refresh", String.valueOf(minutes_between_refresh));
        } else {
            XMLUtil.updateNode(root, rootName + "dboptions/datasource_name", datasource_name);
        }
        
        XMLUtil.updateNode(root, rootName + "mailoptions/default_mail_from", default_mail_from);
        XMLUtil.updateNode(root, rootName + "mailoptions/receive_mail/enable_mail_source", String.valueOf(isReceiveUseMailsource));
        if (isReceiveUseMailsource == false) {
            XMLUtil.updateNode(root, rootName + "mailoptions/receive_mail/mail_server", receive_mail_server);
            XMLUtil.updateNode(root, rootName + "mailoptions/receive_mail/username", receive_mail_username);
            XMLUtil.updateNode(root, rootName + "mailoptions/receive_mail/password", receive_mail_password);
            XMLUtil.updateNode(root, rootName + "mailoptions/receive_mail/port", String.valueOf(receive_mail_port));
        } else {
            XMLUtil.updateNode(root, rootName + "mailoptions/receive_mail/mail_source_name", receive_mail_source_name);            
        }

        XMLUtil.updateNode(root, rootName + "mailoptions/send_mail/use_embeded_smtp_mail_server", String.valueOf(isSendUseSMTPServer));
        if (isSendUseSMTPServer) {
            //do nothing
        } else {
            XMLUtil.updateNode(root, rootName + "mailoptions/send_mail/enable_mail_source", String.valueOf(isSendUseMailsource));
            if (isSendUseMailsource == false) {
                XMLUtil.updateNode(root, rootName + "mailoptions/send_mail/use_secure_connection", String.valueOf(isSendUseSecureConnection));
                XMLUtil.updateNode(root, rootName + "mailoptions/send_mail/mail_server", send_mail_server);
                XMLUtil.updateNode(root, rootName + "mailoptions/send_mail/username", send_mail_username);
                XMLUtil.updateNode(root, rootName + "mailoptions/send_mail/password", send_mail_password);
                XMLUtil.updateNode(root, rootName + "mailoptions/send_mail/port", String.valueOf(send_mail_port));
            } else {
                XMLUtil.updateNode(root, rootName + "mailoptions/send_mail/mail_source_name", send_mail_source_name);
            }
            
        }
        
        XMLUtil.updateNode(root, rootName + "paramoptions/context_path", context_path);
        XMLUtil.updateNode(root, rootName + "paramoptions/server_path", server_path);
        
        XMLUtil.updateNode(root, rootName + "dateoptions/server_hour_offset", String.valueOf(server_hour_offset));
        
        XMLUtil.updateNode(root, rootName + "useragentoptions/blocked_user_agent", String.valueOf(blocked_user_agent));
          
        XMLUtil.updateNode(root, rootName + "mvncoreconfig/timermanager_datasource", timermanager_datasource);
        XMLUtil.updateNode(root, rootName + "mvncoreconfig/enable_link_nofollow", String.valueOf(enable_link_nofollow));
        XMLUtil.updateNode(root, rootName + "mvncoreconfig/enable_encode_url", String.valueOf(enable_encode_url));
        XMLUtil.updateNode(root, rootName + "mvncoreconfig/portal_type", portal_type);
        XMLUtil.updateNode(root, rootName + "mvncoreconfig/allow_http_referer_prefix_list", allow_http_referer_prefix_list);
        XMLUtil.updateNode(root, rootName + "mvncoreconfig/mvncoreservice_implementation", mvncoreservice_implementation);
        XMLUtil.updateNode(root, rootName + "mvncoreconfig/timertaskext_implementation_list", timertaskext_implementation_list);

        XMLUtil.updateNode(root, rootName + "interceptor/mailinterceptor_implementation", mailinterceptor_implementation);
        XMLUtil.updateNode(root, rootName + "interceptor/contentinterceptor_implementation", contentinterceptor_implementation);
        XMLUtil.updateNode(root, rootName + "interceptor/loginidinterceptor_implementation", loginidinterceptor_implementation);
        XMLUtil.updateNode(root, rootName + "interceptor/passwordinterceptor_implementation", passwordinterceptor_implementation);

        saveDocument(document, strPathName + "mvncore.xml");
        MVNCoreConfig.reload();
        request.setAttribute("action", "updatemvncore");
        
        String actionDesc = MVNForumResourceBundle.getString(getEventLogLocale(), "mvnforum.eventlog.desc.UpdateConfigMVNCore");
        eventLogService.logEvent(onlineUser.getMemberName(), request.getRemoteAddr(), MVNForumConstant.EVENT_LOG_MAIN_MODULE, MVNForumConstant.EVENT_LOG_SUB_MODULE_ADMIN, "update config mvncore", actionDesc, EventLogService.HIGH);

    }

    public void updateUrlPattern(GenericRequest request)
        throws BadInputException, DocumentException, IOException,
        AuthenticationException, DatabaseException {

        SecurityUtil.checkHttpPostMethod(request);

        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();

        // now check the password
        MyUtil.ensureCorrectCurrentPassword(request);

        String admin_url = GenericParamUtil.getParameterSafe(request, "admin_url", true);
        String user_url = GenericParamUtil.getParameterSafe(request, "user_url", true);

        String strPathName = FileUtil.getServletClassesPath();
        SAXReader reader = new SAXReader();
        String xmlFilePath = strPathName + "mvnforum.xml";
        Document document = reader.read(new File(xmlFilePath));
        Element root = document.getRootElement();
        String rootName = "/" + root.getName() + "/";
        
        XMLUtil.updateNode(root, rootName + "adminmoduleconfig/url_pattern", admin_url);
        XMLUtil.updateNode(root, rootName + "usermoduleconfig/url_pattern", user_url);

        saveDocument(document, xmlFilePath);
        request.setAttribute("action", "updateurls");
        
        String actionDesc = MVNForumResourceBundle.getString(getEventLogLocale(), "mvnforum.eventlog.desc.UpdateURLPattern");
        eventLogService.logEvent(onlineUser.getMemberName(), request.getRemoteAddr(), MVNForumConstant.EVENT_LOG_MAIN_MODULE, MVNForumConstant.EVENT_LOG_SUB_MODULE_ADMIN, "update url pattern", actionDesc, EventLogService.HIGH);

    }

    public void configBackupProcess(GenericRequest request)
        throws IOException, DatabaseException, AuthenticationException {

    	SecurityUtil.checkHttpReferer(request);
    	
        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();

        String servletClassPath = FileUtil.getServletClassesPath();
        EnvironmentService environmentService = MvnCoreServiceFactory.getMvnCoreService().getEnvironmentService(); 

        String mvnCoreFileName      = servletClassPath + File.separator + "mvncore.xml";
        String mvnForumFileName     = servletClassPath + File.separator + "mvnforum.xml";
        String mvnForumEntFileName  = servletClassPath + File.separator + "mvnforum_enterprise.xml";
        String mvnAdFileName        = servletClassPath + File.separator + "mvnad.xml";
        String mvnCmsFileName       = servletClassPath + File.separator + "mvncms.xml";

        String pattern = "yyyy-MM-dd_HH-mm-ss";
        String nowDesc = DateUtil.format(new Date(), pattern);
        String newMvnCoreFileName       = servletClassPath + File.separator + "mvncore_" + nowDesc + ".xml";
        String newMvnForumFileName      = servletClassPath + File.separator + "mvnforum_" + nowDesc + ".xml";
        String newMvnForumEntFileName   = servletClassPath + File.separator + "mvnforum_enterprise" + nowDesc + ".xml";
        String newMvnAdFileName         = servletClassPath + File.separator + "mvnad" + nowDesc + ".xml";
        String newMvnCmsFileName        = servletClassPath + File.separator + "mvncms" + nowDesc + ".xml";

        // We don't have to check files here, we check it in FileUtil.copyFile
        FileUtil.copyFile(mvnCoreFileName, newMvnCoreFileName, false);
        FileUtil.copyFile(mvnForumFileName, newMvnForumFileName, false);
        
        if (environmentService.getForumRunMode() == EnvironmentService.PRODUCT_ENTERPRISE) {
            FileUtil.copyFile(mvnForumEntFileName, newMvnForumEntFileName, false);
            File newMvnForumEntFile = new File(newMvnForumEntFileName);
            request.setAttribute("MvnForumEntFileName", newMvnForumEntFile.getAbsolutePath());
        }
        if (environmentService.getAdRunMode() != EnvironmentService.PRODUCT_DISABLED) {
            FileUtil.copyFile(mvnAdFileName, newMvnAdFileName, false);
            File newMvnAdFile = new File(newMvnAdFileName);
            request.setAttribute("MvnAdFileName", newMvnAdFile.getAbsolutePath());
        }
        if (environmentService.getCmsRunMode() == EnvironmentService.PRODUCT_ENTERPRISE) {
            FileUtil.copyFile(mvnCmsFileName, newMvnCmsFileName, false);
            File newMvnCmsFile = new File(newMvnCmsFileName);
            request.setAttribute("MvnCmsFileName", newMvnCmsFile.getAbsolutePath());
        }

        File newMVNCoreFile = new File(newMvnCoreFileName);
        File newMVNForumFile = new File(newMvnForumFileName);

        request.setAttribute("MvnCoreFileName", newMVNCoreFile.getAbsolutePath());
        request.setAttribute("MvnForumFileName", newMVNForumFile.getAbsolutePath());
        request.setAttribute("step", "Backup");
    }

    private void saveDocument(Document doc, String fileName) throws IOException {
        XMLWriter writer = new XMLWriter(new FileWriter(fileName));
        writer.write(doc);
        writer.close();
    }

    public void prepareEditTemplate(GenericRequest request)
        throws AuthenticationException, DatabaseException, IOException,
        FileNotFoundException, BadInputException {

        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();

        String templateName = GenericParamUtil.getParameterSafe(request, "template", false);
        StringUtil.checkGoodName(templateName);
        String subject = "";
        String body = "";
        final String SUBJECT_SUFFIX = "_subject";
        final String BODY_SUFFIX = "_body";
        final String EXTENSION = ".ftl";

        if (templateName.equals("")) {
            templateName = MVNForumGlobal.TEMPLATE_SENDACTIVATECODE_PREFIX;
        }

        // check for valid input
        if ((templateName.equals(MVNForumGlobal.TEMPLATE_FORGOTPASSWORD_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_SENDACTIVATECODE_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_DIGEST_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_SENDMAIL_BECAUSE_CENSORED_POST_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_SINGLE_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_GATEWAY_SINGLE_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_GATEWAY_DIGEST_PREFIX) == false)) {
            throw new AssertionError("Does not accept invalid input: " + templateName);
        }

        String templateDir = getTemplateDir();
        String subjectFileName = templateDir + File.separator + templateName + SUBJECT_SUFFIX;
        String bodyFileName    = templateDir + File.separator + templateName + BODY_SUFFIX;

        if (getSendWatchMailAsHTML() &&
            templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_GATEWAY_DIGEST_PREFIX)) {
            bodyFileName += "_html";
        }

        subjectFileName += EXTENSION;
        bodyFileName += EXTENSION;

//        subject = new String(FileUtil.getBytes(new FileInputStream(subjectFileName)), "UTF-8");
//        body    = new String(FileUtil.getBytes(new FileInputStream(bodyFileName)), "UTF-8");
        subject = FileUtil.readFile(subjectFileName, "UTF-8");
        body    = FileUtil.readFile(bodyFileName, "UTF-8");

        request.setAttribute("TemplateSubject", subject);
        request.setAttribute("TemplateBody", body);
    }

    public void processEditTemplate(GenericRequest request)
        throws DatabaseException, AuthenticationException, IOException,
        FileNotFoundException, BadInputException, TemplateException {

        SecurityUtil.checkHttpPostMethod(request);

        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();

        final String SUBJECT_SUFFIX = "_subject";
        final String BODY_SUFFIX = "_body";
        final String EXTENSION = ".ftl";

        String templateName = GenericParamUtil.getParameterSafe(request, "template", true);
        StringUtil.checkGoodName(templateName);

        // checking valid input here
        if ((templateName.equals(MVNForumGlobal.TEMPLATE_FORGOTPASSWORD_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_SENDACTIVATECODE_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_DIGEST_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_SENDMAIL_BECAUSE_CENSORED_POST_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_SINGLE_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_GATEWAY_SINGLE_PREFIX) == false) &&
            (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_GATEWAY_DIGEST_PREFIX) == false)) {
            throw new AssertionError("Does not accept invalid input: " + templateName);
        }

        String subject = GenericParamUtil.getParameter(request, "subject", true);
        String body    = GenericParamUtil.getParameter(request, "body", true);

        String templateDir = getTemplateDir();
        String subjectFileName = templateDir + File.separator + templateName + SUBJECT_SUFFIX;
        String bodyFileName    = templateDir + File.separator + templateName + BODY_SUFFIX;

        if (getSendWatchMailAsHTML() &&
            templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_GATEWAY_DIGEST_PREFIX)) {
            bodyFileName += "_html";
        }

        subjectFileName += EXTENSION;
        bodyFileName += EXTENSION;

        // just for testing FreeMarker
        SimpleHash root = new SimpleHash();
        try {
            Configuration cfg = getFreeMarkerConfiguration();
            if (templateName.equals(MVNForumGlobal.TEMPLATE_SENDACTIVATECODE_PREFIX)) {
                root.put("serverName", "");
                root.put("MVNForumInfo", "");
                root.put("activationUrl", "");
                root.put("memberName", "");
                root.put("activateCode", "");
            } else if (templateName.equals(MVNForumGlobal.TEMPLATE_FORGOTPASSWORD_PREFIX)) {
                root.put("serverName", "");
                root.put("MVNForumInfo", "");
                root.put("passwordResetUrl", "");
                root.put("memberName", "");
                root.put("currentTempPassword", "");
            } else if (templateName.equals(MVNForumGlobal.TEMPLATE_SENDMAIL_BECAUSE_CENSORED_POST_PREFIX)) {
                root.put("postID", "");
                root.put("forumID", "");
                root.put("threadID", "");
                root.put("memberID", "");
                root.put("postURL", "");
            } else if (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_SINGLE_PREFIX)) {
                root.put("lastSent", "");
                root.put("now", "");
                root.put("forumBase", "");

                SimpleHash subRoot = new SimpleHash();
                subRoot.put("categoryName", "");
                subRoot.put("forumName", "");
                subRoot.put("threadTopic", "");
                subRoot.put("threadBody", "");
                subRoot.put("memberName", "");
                subRoot.put("threadUrl", "");
                subRoot.put("lastPostTopic", "");
                subRoot.put("lastPostBody", "");
                subRoot.put("lastPostUrl", "");                
                subRoot.put("lastPostMemberName", "");
                subRoot.put("threadLastPostDate", "");
                subRoot.put("leader", true);

                ArrayList list = new ArrayList();
                list.add(subRoot);

                Iterator iter = list.iterator();

                root.put("threadWatch", iter.next());
            } else if (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_DIGEST_PREFIX)) {
                root.put("lastSent", "");
                root.put("now", "");
                root.put("forumBase", "");

                ArrayList list = new ArrayList();
                SimpleHash subroot = new SimpleHash();
                subroot.put("leader", true);
                subroot.put("categoryName", "");
                subroot.put("forumName", "");
                subroot.put("threadTopic", "");
                subroot.put("threadBody", "");
                subroot.put("memberName", "");
                subroot.put("threadUrl", "");
                subroot.put("lastPostTopic", "");
                subroot.put("lastPostBody", "");
                subroot.put("lastPostUrl", "");
                subroot.put("lastPostMemberName", "");
                subroot.put("threadLastPostDate", "");
                list.add(subroot);

                root.put("threadWatchList", list);
            } else if (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_GATEWAY_SINGLE_PREFIX)) {
                root.put("lastSent", "");
                root.put("now", "");
                root.put("forumBase", "");

                SimpleHash subRoot = new SimpleHash();
                subRoot.put("categoryName", "");
                subRoot.put("forumName", "");
                subRoot.put("memberReceiveMail", "");
                subRoot.put("confirmedCode", "");
                subRoot.put("threadID", "");
                subRoot.put("memberName", "");
                subRoot.put("threadTopic", "");
                subRoot.put("threadBody", "");
                subRoot.put("threadBodyLong", "");
                subRoot.put("threadBodyShort", "");
                subRoot.put("threadUrl", "");
                subRoot.put("lastPostTopic", "");
                subRoot.put("lastPostBody", "");
                subRoot.put("lastPostUrl", "");
                subRoot.put("lastPostMemberName", "");
                subRoot.put("threadLastPostDate", "");
                subRoot.put("leader", true);
                subRoot.put("haveConfirmedCode", true);

                ArrayList list = new ArrayList();
                list.add(subRoot);

                Iterator iter = list.iterator();

                root.put("threadWatch", iter.next());
            } else if (templateName.equals(MVNForumGlobal.TEMPLATE_WATCHMAIL_GATEWAY_DIGEST_PREFIX)) {
                root.put("lastSent", "");
                root.put("now", "");
                root.put("forumBase", "");

                SimpleHash subRoot = new SimpleHash();
                subRoot.put("categoryName", "");
                subRoot.put("forumName", "");
                subRoot.put("memberReceiveMail", "");
                subRoot.put("confirmedCode", "");
                subRoot.put("threadID", "");
                subRoot.put("memberName", "");
                subRoot.put("threadTopic", "");
                subRoot.put("threadBody", "");
                subRoot.put("threadBodyLong", "");
                subRoot.put("threadUrl", "");
                subRoot.put("lastPostTopic", "");
                subRoot.put("lastPostBody", "");
                subRoot.put("lastPostUrl", "");
                subRoot.put("lastPostMemberName", "");
                subRoot.put("threadLastPostDate", "");
                subRoot.put("leader", true);
                subRoot.put("haveConfirmedCode", true);
                subRoot.put("mailFrom", "");

                ArrayList list = new ArrayList();
                list.add(subRoot);

                root.put("threadWatchList", list);
            } else {
                AssertionUtil.doAssert(false, "Does not accept invalid input: " + templateName);
            }
            StringReader subjectReader = new StringReader(subject);
            StringReader bodyReader = new StringReader(body);

            Template subjectTemplate = new Template("", subjectReader, cfg, "");
            StringWriter subjectWriter = new StringWriter(256);
            subjectTemplate.process(root, subjectWriter);

            Template bodyTemplate = new Template("", bodyReader, cfg, "");
            StringWriter bodyWriter = new StringWriter(1024);
            bodyTemplate.process(root, bodyWriter);
        } catch(TemplateException ex) {
            throw ex;
        }
        FileUtil.writeFile(subject, subjectFileName, "UTF-8");
        FileUtil.writeFile(body, bodyFileName, "UTF-8");
        
        String actionDesc = MVNForumResourceBundle.getString(getEventLogLocale(), "mvnforum.eventlog.desc.UpdateTemplate", new Object[]{templateName});
        eventLogService.logEvent(onlineUser.getMemberName(), request.getRemoteAddr(), MVNForumConstant.EVENT_LOG_MAIN_MODULE, MVNForumConstant.EVENT_LOG_SUB_MODULE_ADMIN, "update template", actionDesc, EventLogService.MEDIUM);

        request.setAttribute("Successful", "true");
        request.setAttribute("TemplateSubject", subject);
        request.setAttribute("TemplateBody", body);
    }

    public void commitConfig(GenericRequest request)
        throws DatabaseException, AuthenticationException {

        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();
        
        reload();
        MVNCoreConfig.reload();
        
        MvnCoreServiceFactory.getMvnCoreService().getEnvironmentService().overloadEnvironment();
        
        request.setAttribute("action", "commit");
    }

	public static void reload() {
		String strPathName = FileUtil.getServletClassesPath();
		String configFilename = strPathName + OPTION_FILE_NAME;
		try {
			DOM4JConfiguration conf = new DOM4JConfiguration(new File(
					configFilename));
			MVNForumHome = conf.getString("mvnforumconfig.mvnforum_home", "");
			setMVNForumHome(MVNForumHome);
			webMasterEmail = conf.getString("mvnforumconfig.webmaster_email",
					"");
			watchEmail = conf.getString("mvnforumconfig.watch_email", "");
			logoURL = conf.getString("mvnforumconfig.logo_url", logoURL);
			logFile = conf.getString("mvnforumconfig.mvnforum_log", "");
			String supportedLocalesConfig = conf.getString(
					"mvnforumconfig.supported_locales", "");
			supportedLocaleNames = StringUtil.getStringArray(
					supportedLocalesConfig, ";");
			supportedLocales = new Locale[supportedLocaleNames.length];
			for (int i = 0; i < supportedLocaleNames.length; i++) {
				String localeName = supportedLocaleNames[i];
				supportedLocales[i] = MyUtil.getLocale(localeName);
			}
			try {
				defaultLocaleName = conf.getString(
						"mvnforumconfig.default_locale_name", "");
				if (defaultLocaleName.length() == 0) {
					defaultLocaleName = "en";
				}
			} catch (Exception ex) {
				log.warn(ex.getMessage());
			}
			defaultLocale = MyUtil.getLocale(defaultLocaleName);
			eventLogLocale = MyUtil.getLocale(conf
					.getString("mvnforumconfig.event_log_locale"));
			try {
				defaultGuestName = conf.getString(
						"mvnforumconfig.default_guest_name", defaultGuestName);
			} catch (Exception ex) {
				log.warn(ex.getMessage());
			}
			defaultGuestTimeZone = conf.getDouble(
					"mvnforumconfig.default_guest_timezone",
					defaultGuestTimeZone);
			if (Math.abs(defaultGuestTimeZone) > 12) {
				defaultGuestTimeZone = 0;
			}
			redirectLoginURL = conf.getString(
					"mvnforumconfig.redirect_login_url", redirectLoginURL);
			redirectLogoutURL = conf.getString(
					"mvnforumconfig.redirect_logout_url", redirectLogoutURL);
			localeParameterName = conf
					.getString("mvnforumconfig.locale_parameter_name",
							localeParameterName);
			enablePasswordlessAuth = conf.getBoolean(
					"mvnforumconfig.enable_passwordless_auth", false);
			requireActivation = conf.getBoolean(
					"mvnforumconfig.require_activation", false);
			enableLoginInfoInCookie = conf.getBoolean(
					"mvnforumconfig.enable_login_info_in_cookie", true);
			enableLoginInfoInSession = conf.getBoolean(
					"mvnforumconfig.enable_login_info_in_session", true);
			enableLoginInfoInRealm = conf.getBoolean(
					"mvnforumconfig.enable_login_info_in_realm", false);
			enableLoginInfoInCustomization = conf.getBoolean(
					"mvnforumconfig.enable_login_info_in_customization", false);
			enableCheckInvalidSession = conf.getBoolean(
					"mvnforumconfig.enable_check_invalid_session", true);
			enableCacheMember = conf.getBoolean(
					"mvnforumconfig.enable_cache_member", true);
			enableCachePost = conf.getBoolean(
					"mvnforumconfig.enable_cache_post", true);
			enableCacheThread = conf.getBoolean(
					"mvnforumconfig.enable_cache_thread", true);
			enableCacheForum = conf.getBoolean(
					"mvnforumconfig.enable_cache_forum", true);
			enableCacheCategory = conf.getBoolean(
					"mvnforumconfig.enable_cache_category", true);
			enableLogin = conf.getBoolean("mvnforumconfig.enable_login", true);
			enableRegisterRule = conf.getBoolean(
					"mvnforumconfig.enable_register_rule", true);
			enableNewMember = conf.getBoolean(
					"mvnforumconfig.enable_new_member", true);
			enableNewPost = conf.getBoolean("mvnforumconfig.enable_new_post",
					true);
			enableSplitThread = conf.getBoolean(
					"mvnforumconfig.enable_split_thread", true);
			enableAvatar = conf
					.getBoolean("mvnforumconfig.enable_avatar", true);
			enableEmotion = conf.getBoolean("mvnforumconfig.enable_emoticon",
					true);
			enableRSS = conf.getBoolean("mvnforumconfig.enable_rss", true);
			enableSearch = conf
					.getBoolean("mvnforumconfig.enable_search", true);
			enableWatch = conf.getBoolean("mvnforumconfig.enable_watch", true);
			enableAttachment = conf.getBoolean(
					"mvnforumconfig.enable_attachment", true);
			enableMessageAttachment = conf.getBoolean(
					"mvnforumconfig.enable_message_attachment", true);
			enableCaptcha = conf.getBoolean("mvnforumconfig.enable_captcha",
					false);
			enablePortalLikeIndexPage = conf.getBoolean(
					"mvnforumconfig.enable_portal_like_index_page", true);
			enableAdminCanChangePassword = conf.getBoolean(
					"mvnforumconfig.enable_admin_can_change_password", true);
			enableShowLastLoginOfCurrentMember = conf.getBoolean(
					"mvnforumconfig.enable_show_last_login_of_current_member",
					true);
			enableExpanseCategoryTree = conf.getBoolean(
					"mvnforumconfig.enable_expanse_category_tree_by_default",
					enableExpanseCategoryTree);
			enableShowEmail = conf.getBoolean(
					"mvnforumconfig.enable_show_email", true);
			enableShowBirthday = conf.getBoolean(
					"mvnforumconfig.enable_show_birthday", true);
			enableShowGender = conf.getBoolean(
					"mvnforumconfig.enable_show_gender", true);
			enableShowAddress = conf.getBoolean(
					"mvnforumconfig.enable_show_address", true);
			enableShowAOL = conf.getBoolean("mvnforumconfig.enable_show_aol",
					true);
			enableShowCareer = conf.getBoolean(
					"mvnforumconfig.enable_show_career", true);
			enableShowCity = conf.getBoolean("mvnforumconfig.enable_show_city",
					true);
			enableShowCoolLink_1 = conf.getBoolean(
					"mvnforumconfig.enable_show_cool_link_1", true);
			enableShowCoolLink_2 = conf.getBoolean(
					"mvnforumconfig.enable_show_cool_link_2", true);
			enableShowCountry = conf.getBoolean(
					"mvnforumconfig.enable_show_country", true);
			enableShowHomepage = conf.getBoolean(
					"mvnforumconfig.enable_show_homepage", true);
			enableShowICQ = conf.getBoolean("mvnforumconfig.enable_show_icq",
					true);
			enableShowJoinDate = conf.getBoolean(
					"mvnforumconfig.enable_show_join_date", true);
			enableShowMobile = conf.getBoolean(
					"mvnforumconfig.enable_show_mobile", true);
			enableShowFax = conf.getBoolean("mvnforumconfig.enable_show_fax",
					true);
			enableShowMSN = conf.getBoolean("mvnforumconfig.enable_show_msn",
					true);
			enableShowPhone = conf.getBoolean(
					"mvnforumconfig.enable_show_phone", true);
			enableShowState = conf.getBoolean(
					"mvnforumconfig.enable_show_state", true);
			enableShowYahoo = conf.getBoolean(
					"mvnforumconfig.enable_show_yahoo", true);
			enableShowPostCount = conf.getBoolean(
					"mvnforumconfig.enable_show_post_count", true);
			enableShowOnlineStatus = conf.getBoolean(
					"mvnforumconfig.enable_show_online_status", true);
			enableShowFirstName = conf.getBoolean(
					"mvnforumconfig.enable_show_firstname", true);
			enableShowLastName = conf.getBoolean(
					"mvnforumconfig.enable_show_lastname", true);
			enableShowPostCount = conf.getBoolean(
					"mvnforumconfig.enable_show_post_count", true);
			enableShowViewCount = conf.getBoolean(
					"mvnforumconfig.enable_show_view_count", true);
			enableShowLastLogin = conf.getBoolean(
					"mvnforumconfig.enable_show_last_login", true);
			requireRegisterFirstname = conf.getBoolean(
					"mvnforumconfig.require_register_firstname", true);
			requireRegisterLastname = conf.getBoolean(
					"mvnforumconfig.require_register_lastname", true);
			requireRegisterGender = conf.getBoolean(
					"mvnforumconfig.require_register_gender", true);
			requireRegisterBirthday = conf.getBoolean(
					"mvnforumconfig.require_register_birthday", true);
			requireRegisterAddress = conf.getBoolean(
					"mvnforumconfig.require_register_address", true);
			requireRegisterCity = conf.getBoolean(
					"mvnforumconfig.require_register_city", true);
			requireRegisterState = conf.getBoolean(
					"mvnforumconfig.require_register_state", true);
			requireRegisterCountry = conf.getBoolean(
					"mvnforumconfig.require_register_country", true);
			requireRegisterPhone = conf.getBoolean(
					"mvnforumconfig.require_register_phone", true);
			requireRegisterMobile = conf.getBoolean(
					"mvnforumconfig.require_register_mobile", true);
			requireRegisterFax = conf.getBoolean(
					"mvnforumconfig.require_register_fax", true);
			requireRegisterCareer = conf.getBoolean(
					"mvnforumconfig.require_register_career", true);
			requireRegisterHomepage = conf.getBoolean(
					"mvnforumconfig.require_register_homepage", true);
			requireRegisterYahoo = conf.getBoolean(
					"mvnforumconfig.require_register_yahoo", true);
			requireRegisterAol = conf.getBoolean(
					"mvnforumconfig.require_register_aol", true);
			requireRegisterIcq = conf.getBoolean(
					"mvnforumconfig.require_register_icq", true);
			requireRegisterMsn = conf.getBoolean(
					"mvnforumconfig.require_register_msn", true);
			requireRegisterLink1 = conf.getBoolean(
					"mvnforumconfig.require_register_link_1", true);
			requireRegisterLink2 = conf.getBoolean(
					"mvnforumconfig.require_register_link_2", true);
			enableAutoWatching = conf.getBoolean(
					"mvnforumconfig.enable_auto_watching", false);
			enableSendWatchMailOfMyOwnPost = conf.getBoolean(
					"mvnforumconfig.enable_send_watch_mail_of_my_own_post",
					false);
			enableEasyWatching = conf.getBoolean(
					"mvnforumconfig.enable_easy_watching", true);
			enableUsePopupMenuInViewThread = conf.getBoolean(
					"mvnforumconfig.enable_use_popup_menu_in_viewthread", true);
			maxLastPostBodyInWatch = conf.getInt(
					"mvnforumconfig.max_last_post_body_in_watch", 0);
			if (maxLastPostBodyInWatch < 0) {
				maxLastPostBodyInWatch = 0;
			}
			enableOnlineUsers = conf.getBoolean(
					"mvnforumconfig.enable_online_users", true);
			enableListMembers = conf.getBoolean(
					"mvnforumconfig.enable_listmembers", true);
			enableDuplicateOnlineUsers = conf.getBoolean(
					"mvnforumconfig.enable_duplicate_onlineusers", true);
			enableInvisibleUsers = conf.getBoolean(
					"mvnforumconfig.enable_invisible_users", true);
			enablePrivateMessage = conf.getBoolean(
					"mvnforumconfig.enable_private_message", true);
			enablePublicMessage = conf.getBoolean(
					"mvnforumconfig.enable_public_message", false);
			enableGuestViewImageAttachment = conf.getBoolean(
					"mvnforumconfig.enable_guest_view_image_attachment", false);
			enableGuestViewListUsers = conf.getBoolean(
					"mvnforumconfig.enable_guest_view_listusers", true);
			enableMostActiveMembers = conf.getBoolean(
					"mvnforumconfig.enable_most_active_members", true);
			enableMostActiveThreads = conf.getBoolean(
					"mvnforumconfig.enable_most_active_threads", true);
			onlyNormalThreadTypeInActiveThreads = conf.getBoolean(
					"mvnforumconfig.only_normal_thread_type_in_active_threads",
					false);
			enableSiteStatisticsOverview = conf.getBoolean(
					"mvnforumconfig.enable_site_statistics_overview", false);
			enableListNewMembersInRecentDays = conf.getBoolean(
					"mvnforumconfig.enable_list_new_members_in_recent_days",
					false);
			enableListUsersBrowsingForum = conf.getBoolean(
					"mvnforumconfig.enable_list_users_browsing_forum", false);
			enableListUsersBrowsingThread = conf.getBoolean(
					"mvnforumconfig.enable_list_users_browsing_thread", false);
			daysToShowRecentMembers = conf.getInt(
					"mvnforumconfig.days_to_show_recent_members", 1);
			if (daysToShowRecentMembers < 1) {
				daysToShowRecentMembers = 1;
			}
			enableEmailThreateningContent = conf.getBoolean(
					"mvnforumconfig.enable_email_threatening_content", true);
			enableEmailToAdminContentWithCensoredWords = conf
					.getBoolean(
							"mvnforumconfig.enable_email_to_admin_content_with_censored_words",
							true);
			defaultCategoryID = conf
					.getInt("mvnforumconfig.default_category_id");
			enableThumbnail = conf.getBoolean(
					"mvnforumconfig.image_thumbnail.enable", false);
			thumbnailWidth = conf.getInt(
					"mvnforumconfig.image_thumbnail.width", 100);
			if (thumbnailWidth < 0) {
				thumbnailWidth = 0;
			}
			thumbnailHeight = conf.getInt(
					"mvnforumconfig.image_thumbnail.height", 100);
			if (thumbnailHeight < 0) {
				thumbnailHeight = 0;
			}
			enableListUnansweredThreads = conf.getBoolean(
					"mvnforumconfig.enable_listunansweredthreads", true);
			enableEncryptPasswordOnBrowser = conf.getBoolean(
					"mvnforumconfig.enable_encrypt_password_on_browser", true);
			enableExternalUserDatabase = conf.getBoolean(
					"mvnforumconfig.enable_external_user_database", false);
			sendWatchMailAsHTML = conf.getBoolean(
					"mvnforumconfig.send_watchmail_as_html", false);
			enableFriendlyURL = conf.getBoolean(
					"mvnforumconfig.enable_friendly_url", false);
			boolean isPortlet = MvnCoreServiceFactory.getMvnCoreService()
					.getEnvironmentService().isPortlet();
			if (isPortlet) {
				enableExternalUserDatabase = true;
				enableFriendlyURL = false;
			}
			if (enableExternalUserDatabase) {
				enablePasswordlessAuth = false;
				enableNewMember = false;
				enableAdminCanChangePassword = false;
				enableListMembers = false;
				enableAdminCanChangePassword = false;
				enableListMembers = false;
				enableShowLastLogin = false;
				enableNewMember = false;
				requireActivation = false;
				enableCaptcha = false;
				enableSiteStatisticsOverview = false;
			}
			if (isPortlet) {
				enablePasswordlessAuth = false;
				enableLoginInfoInCookie = false;
				enableLoginInfoInSession = false;
				enableLogin = false;
				if (enableLoginInfoInCustomization == false) {
					enableLoginInfoInRealm = true;
				}
				enableLoginInfoInCustomization = true;
			}
			maxAttachmentSize = StringUtil.parseIntSizeValue(
					conf.getString("mvnforumconfig.max_attachment_size"), 1024);
			if (maxAttachmentSize < -1) {
				maxAttachmentSize = 0;
			}
			maxMessageAttachmentSize = StringUtil.parseIntSizeValue(conf
					.getString("mvnforumconfig.max_message_attachment_size"),
					1024);
			if (maxMessageAttachmentSize < -1) {
				maxMessageAttachmentSize = 0;
			}
			maxFavoriteThreads = conf.getInt(
					"mvnforumconfig.max_favorite_thread", 128);
			if (maxFavoriteThreads < 0) {
				maxFavoriteThreads = 0;
			}
			maxPrivateMessages = conf.getInt(
					"mvnforumconfig.max_private_message", 128);
			if (maxPrivateMessages < 0) {
				maxPrivateMessages = 0;
			}
			maxEditDays = conf.getInt("mvnforumconfig.max_edit_days", 7);
			if (maxEditDays < 0) {
				maxEditDays = 0;
			}
			maxAttachDays = conf.getInt("mvnforumconfig.max_attach_days", 1);
			if (maxAttachDays < 0) {
				maxAttachDays = 0;
			}
			maxDeleteDays = conf.getInt("mvnforumconfig.max_delete_days", 1);
			if (maxDeleteDays < 0) {
				maxDeleteDays = 0;
			}
			rowsPerPage = conf.getInt("mvnforumconfig.rows_per_page", 10);
			if (rowsPerPage < 5) {
				rowsPerPage = 5;
			}
			rowsPerRSS = conf.getInt("mvnforumconfig.rows_per_rss", 15);
			if (rowsPerRSS < 5) {
				rowsPerRSS = 5;
			}
			maxHotTopics = conf
					.getInt("mvnforumconfig.hot_topic_threshold", 10);
			if (maxHotTopics < 5) {
				maxHotTopics = 5;
			}
			maxHttpRequestsPerHourPerIP = conf.getInt(
					"mvnforumconfig.max_http_requests_per_hour_per_ip",
					maxHttpRequestsPerHourPerIP);
			if (maxHttpRequestsPerHourPerIP < 0) {
				maxHttpRequestsPerHourPerIP = 0;
			}
			maxPostsPerHourPerIP = conf.getInt(
					"mvnforumconfig.max_posts_per_hour_per_ip",
					maxPostsPerHourPerIP);
			if (maxPostsPerHourPerIP < 0) {
				maxPostsPerHourPerIP = 0;
			}
			maxPostsPerHourPerMember = conf.getInt(
					"mvnforumconfig.max_posts_per_hour_per_member",
					maxPostsPerHourPerMember);
			if (maxPostsPerHourPerMember < 0) {
				maxPostsPerHourPerMember = 0;
			}
			maxMembersPerHourPerIP = conf.getInt(
					"mvnforumconfig.max_members_per_hour_per_ip",
					maxMembersPerHourPerIP);
			if (maxMembersPerHourPerIP < 0) {
				maxMembersPerHourPerIP = 0;
			}
			maxLoginsPerHourPerIP = conf.getInt(
					"mvnforumconfig.max_logins_per_hour_per_ip",
					maxLoginsPerHourPerIP);
			if (maxLoginsPerHourPerIP < 0) {
				maxLoginsPerHourPerIP = 0;
			}
			maxMessagesPerHourPerIP = conf.getInt(
					"mvnforumconfig.max_messages_per_hour_per_ip",
					maxMessagesPerHourPerIP);
			if (maxMessagesPerHourPerIP < 0) {
				maxMessagesPerHourPerIP = 0;
			}
			maxPasswordDays = conf
					.getInt("mvnforumconfig.max_password_days", 1);
			if (maxPasswordDays < 0) {
				maxPasswordDays = 1;
			}
			maxCharsInShortSummary = conf.getInt(
					"mvnforumconfig.max_chars_in_short_summary",
					maxCharsInShortSummary);
			if (maxCharsInShortSummary <= 0) {
				maxCharsInShortSummary = Integer.MAX_VALUE;
			}
			maxCharsInLongSummary = conf.getInt(
					"mvnforumconfig.max_chars_in_long_summary",
					maxCharsInLongSummary);
			if (maxCharsInLongSummary <= 0) {
				maxCharsInLongSummary = Integer.MAX_VALUE;
			}
			maxCharsInRSS = conf.getInt("mvnforumconfig.max_chars_in_rss",
					maxCharsInRSS);
			if (maxCharsInRSS <= 0) {
				maxCharsInRSS = Integer.MAX_VALUE;
			}
			ENABLE_BACKUP_ON_SERVER = conf.getBoolean(
					"mvnforumconfig.enable_backup_on_server", true);
			maxImportSize = StringUtil
					.parseIntSizeValue(conf.getString(
							"mvnforumconfig.max_import_size", "4096000"),
							4096000);
			defaultWatchOption = conf.getInt(
					"mvnforumconfig.default_watch_option",
					WatchBean.WATCH_OPTION_DEFAULT);
			if (defaultWatchOption < WatchBean.WATCH_OPTION_DEFAULT
					|| defaultWatchOption > WatchBean.WATCH_OPTION_WEEKLY) {
				defaultWatchOption = WatchBean.WATCH_OPTION_DEFAULT;
			}
			defaultModerationOption = conf.getInt(
					"mvnforumconfig.default_moderation_option",
					ForumBean.FORUM_MODERATION_MODE_SYSTEM_DEFAULT);
			if (defaultModerationOption < ForumBean.FORUM_MODERATION_MODE_SYSTEM_DEFAULT
					|| defaultModerationOption > ForumBean.FORUM_MODERATION_MODE_POST_ONLY) {
				defaultModerationOption = ForumBean.FORUM_MODERATION_MODE_SYSTEM_DEFAULT;
			}
			defaultWatchType = conf.getInt("mvnforumconfig.default_watch_type",
					WatchBean.WATCH_TYPE_DEFAULT);
			if (defaultWatchType < WatchBean.WATCH_TYPE_DIGEST
					|| defaultWatchType > WatchBean.WATCH_TYPE_NONDIGEST) {
				defaultWatchType = WatchBean.WATCH_TYPE_DIGEST;
			}
			haveInternet = conf.getBoolean("mvnforumconfig.have_internet",
					false);
			defaultStatusOfRegisteredMember = conf.getInt(
					"mvnforumconfig.default_status_of_registered_member",
					defaultStatusOfRegisteredMember);
			if (defaultStatusOfRegisteredMember < MemberBean.MEMBER_STATUS_ENABLE
					|| defaultStatusOfRegisteredMember > MemberBean.MEMBER_STATUS_PENDING) {
				defaultStatusOfRegisteredMember = MemberBean.MEMBER_STATUS_ENABLE;
			}
			FloodControl.setOption(MVNForumGlobal.FLOOD_ID_NEW_MEMBER_PER_IP,
					maxMembersPerHourPerIP);
			FloodControl.setOption(MVNForumGlobal.FLOOD_ID_NEW_POST_PER_IP,
					maxPostsPerHourPerIP);
			FloodControl.setOption(MVNForumGlobal.FLOOD_ID_NEW_POST_PER_MEMBER,
					maxPostsPerHourPerMember);
			FloodControl.setOption(MVNForumGlobal.FLOOD_ID_LOGIN_PER_IP,
					maxLoginsPerHourPerIP);
			FloodControl.setOption(MVNForumGlobal.FLOOD_ID_NEW_MESSAGE_PER_IP,
					maxMessagesPerHourPerIP);
			FloodControl.setOption(MVNForumGlobal.FLOOD_ID_HTTP_REQUEST_PER_IP,
					maxHttpRequestsPerHourPerIP);
			enableRWC = MvnCoreServiceFactory.getMvnCoreService()
					.getEnvironmentService().customizeFor().equals("RWC");
		} catch (Exception e) {
			String message = "com.mvnforum.MVNForumConfig: Can't read the configuration file: '"
					+ configFilename
					+ "'. Make sure the file is in your CLASSPATH";
			log.error(message, e);
			MvnCoreServiceFactory
					.getMvnCoreService()
					.getEnvironmentService()
					.setShouldRun(
							false,
							"com.mvnforum.MVNForumConfig: Can't read the configuration file: '"
									+ OPTION_FILE_NAME
									+ "'. Make sure the file is in your CLASSPATH");
		}
	}

	public static Locale getEventLogLocale() {
		return eventLogLocale;
	}

	public static String getTemplateDir() {
		return templateDir;
	}

	public static boolean getSendWatchMailAsHTML() {
		return sendWatchMailAsHTML;
	}

	public static Configuration getFreeMarkerConfiguration() {
		return freeMarkerConfiguration;
	}

	private static void setMVNForumHome(String home) {
		try {
			FileUtil.createDirs(home, true);
			String tempFilename = home + File.separatorChar
					+ "mvnforum_tempfile.tmp";
			File tempFile = new File(tempFilename);
			if (log.isDebugEnabled()) {
				log.debug("Temp file = " + tempFilename);
				log.debug("Absolute filename of temp file = "
						+ tempFile.getAbsolutePath());
			}
			FileOutputStream fos = new FileOutputStream(tempFilename);
			fos.write(tempFilename.getBytes());
			fos.close();
			tempFile.delete();
			tempDir = MVNForumHome + File.separatorChar + "temp";
			FileUtil.createDirs(tempDir, true);
			searchPostIndexDir = MVNForumHome + File.separatorChar + "search"
					+ File.separatorChar + "post";
			FileUtil.createDirs(searchPostIndexDir, true);
			searchMemberIndexDir = MVNForumHome + File.separatorChar + "search"
					+ File.separatorChar + "member";
			FileUtil.createDirs(searchMemberIndexDir, true);
			searchAttachmentIndexDir = MVNForumHome + File.separatorChar
					+ "search" + File.separatorChar + "attachment";
			FileUtil.createDirs(searchAttachmentIndexDir, true);
			searchAlbumItemIndexDir = MVNForumHome + File.separatorChar
					+ "search" + File.separatorChar + "albumitem";
			FileUtil.createDirs(searchAlbumItemIndexDir, true);
			attachmentDir = MVNForumHome + File.separatorChar + "attachment";
			FileUtil.createDirs(attachmentDir, true);
			pmAttachmentDir = MVNForumHome + File.separatorChar
					+ "pm_attachment";
			FileUtil.createDirs(pmAttachmentDir, true);
			backupDir = MVNForumHome + File.separatorChar + "backup";
			FileUtil.createDirs(backupDir, true);
			logDir = MVNForumHome + File.separatorChar + "log";
			FileUtil.createDirs(logDir, true);
			avatarDir = MVNForumHome + File.separatorChar + "memberavatars";
			FileUtil.createDirs(avatarDir, true);
			templateDir = MVNForumHome + File.separatorChar + "template";
			FileUtil.createDirs(templateDir, true);
			albumItemDir = MVNForumHome + File.separatorChar + "albumdata";
			FileUtil.createDirs(albumItemDir, true);
		} catch (IOException ex) {
			log.fatal(
					"Cannot setup the mvnForumHome folder. Please correct it first.",
					ex);
			MvnCoreServiceFactory
					.getMvnCoreService()
					.getEnvironmentService()
					.setShouldRun(
							false,
							"Check your mvnForumHome. Detail : "
									+ ex.getMessage());
		} catch (AssertionError ae) {
			log.fatal("Assertion error. Please correct it first.", ae);
			MvnCoreServiceFactory
					.getMvnCoreService()
					.getEnvironmentService()
					.setShouldRun(false,
							"Assertion error. Detail : " + ae.getMessage());
		}
	}

	private static final String OPTION_FILE_NAME = "mvnforum.xml";
	private static String MVNForumHome = "mvnForumHome";
	private static String webMasterEmail = "youremail@yourdomain.com";
	private static String watchEmail = "youremail@yourdomain.com";
	private static String logoURL = "http://www.mvnForum.com";
	private static String logFile = "";
	private static String[] supportedLocaleNames = new String[0];
	private static Locale[] supportedLocales = new Locale[0];
	private static String defaultLocaleName = "en";
	private static final Log log = LogFactory.getLog(MVNForumConfig.class);
	private static Locale defaultLocale = null;
	private static Locale eventLogLocale = Locale.ENGLISH;
	/**
	 * Default username of a virtual Guest user. Will be overriden with the data from the database, if it exists (for the Guest user). Admin can give him a name he wants, like "Guest", "Anonymous", "Surfer", or even use a language different than English.
	 */
	private static String defaultGuestName = "Guest";
	private static double defaultGuestTimeZone = 0;
	private static String redirectLoginURL = "/login";
	private static String redirectLogoutURL = "/logout";
	private static String localeParameterName = "lang";
	/**
	 * By default, mvnForum disable passwordless authentication If you want to authenticate user from realm or customized methods, then set the variable to true (AT YOUR OWN RISK, although I have not found any security issues until now)
	 */
	private static boolean enablePasswordlessAuth = false;
	private static boolean requireActivation = false;
	private static boolean enableLoginInfoInCookie = true;
	private static boolean enableLoginInfoInSession = true;
	private static boolean enableLoginInfoInRealm = false;
	private static boolean enableLoginInfoInCustomization = false;
	private static boolean enableCheckInvalidSession = true;
	private static boolean enableCacheMember = true;
	private static boolean enableCachePost = true;
	private static boolean enableCacheThread = true;
	private static boolean enableCacheForum = true;
	private static boolean enableCacheCategory = true;
	private static boolean enableLogin = true;
	private static boolean enableRegisterRule = true;
	private static boolean enableNewMember = true;
	private static boolean enableNewPost = true;
	private static boolean enableSplitThread = true;
	private static boolean enableAvatar = true;
	private static boolean enableEmotion = true;
	private static boolean enableRSS = true;
	private static boolean enableSearch = true;
	private static boolean enableWatch = true;
	private static boolean enableAttachment = true;
	private static boolean enableMessageAttachment = true;
	private static boolean enableCaptcha = false;
	private static boolean enablePortalLikeIndexPage = true;
	private static boolean enableAdminCanChangePassword = true;
	private static boolean enableShowLastLoginOfCurrentMember = true;
	private static boolean enableExpanseCategoryTree = true;
	private static boolean enableShowEmail = true;
	private static boolean enableShowBirthday = true;
	private static boolean enableShowGender = true;
	private static boolean enableShowAddress = true;
	private static boolean enableShowAOL = true;
	private static boolean enableShowCareer = true;
	private static boolean enableShowCity = true;
	private static boolean enableShowCoolLink_1 = true;
	private static boolean enableShowCoolLink_2 = true;
	private static boolean enableShowCountry = true;
	private static boolean enableShowHomepage = true;
	private static boolean enableShowICQ = true;
	private static boolean enableShowJoinDate = true;
	private static boolean enableShowMobile = true;
	private static boolean enableShowFax = true;
	private static boolean enableShowMSN = true;
	private static boolean enableShowPhone = true;
	private static boolean enableShowState = true;
	private static boolean enableShowYahoo = true;
	private static boolean enableShowPostCount = true;
	private static boolean enableShowOnlineStatus = true;
	private static boolean enableShowFirstName = true;
	private static boolean enableShowLastName = true;
	private static boolean enableShowViewCount = true;
	private static boolean enableShowLastLogin = true;
	public static boolean requireRegisterFirstname = false;
	public static boolean requireRegisterLastname = false;
	public static boolean requireRegisterGender = false;
	public static boolean requireRegisterBirthday = false;
	public static boolean requireRegisterAddress = false;
	public static boolean requireRegisterCity = false;
	public static boolean requireRegisterState = false;
	public static boolean requireRegisterCountry = false;
	public static boolean requireRegisterPhone = false;
	public static boolean requireRegisterMobile = false;
	public static boolean requireRegisterFax = false;
	public static boolean requireRegisterCareer = false;
	public static boolean requireRegisterHomepage = false;
	public static boolean requireRegisterYahoo = false;
	public static boolean requireRegisterAol = false;
	public static boolean requireRegisterIcq = false;
	public static boolean requireRegisterMsn = false;
	public static boolean requireRegisterLink1 = false;
	public static boolean requireRegisterLink2 = false;
	private static boolean enableAutoWatching = false;
	private static boolean enableSendWatchMailOfMyOwnPost = false;
	private static boolean enableEasyWatching = true;
	private static boolean enableUsePopupMenuInViewThread = false;
	private static int maxLastPostBodyInWatch = 0;
	private static boolean enableOnlineUsers = true;
	private static boolean enableListMembers = true;
	private static boolean enableDuplicateOnlineUsers = true;
	private static boolean enableInvisibleUsers = true;
	private static boolean enablePrivateMessage = true;
	private static boolean enablePublicMessage = true;
	private static boolean enableGuestViewImageAttachment = false;
	private static boolean enableGuestViewListUsers = false;
	private static boolean enableMostActiveMembers = true;
	private static boolean enableMostActiveThreads = true;
	private static boolean onlyNormalThreadTypeInActiveThreads = false;
	private static boolean enableSiteStatisticsOverview = true;
	private static boolean enableListNewMembersInRecentDays = false;
	private static boolean enableListUsersBrowsingForum = false;
	private static boolean enableListUsersBrowsingThread = false;
	private static int daysToShowRecentMembers = 1;
	private static boolean enableEmailThreateningContent = true;
	private static boolean enableEmailToAdminContentWithCensoredWords = true;
	private static int defaultCategoryID = 1;
	private static boolean enableThumbnail = false;
	private static int thumbnailWidth = 100;
	private static int thumbnailHeight = 100;
	private static boolean enableListUnansweredThreads = true;
	private static boolean enableEncryptPasswordOnBrowser = true;
	private static boolean enableExternalUserDatabase = false;
	private static boolean sendWatchMailAsHTML = true;
	private static boolean enableFriendlyURL = false;
	private static int maxAttachmentSize = 1024;
	private static int maxMessageAttachmentSize = 1024;
	/**
	 * This is the maximum number of favorite threads that a user can add
	 */
	private static int maxFavoriteThreads = 128;
	private static int maxPrivateMessages = 128;
	/**
	 * Configurable number of days that a user can edit a post
	 */
	private static int maxEditDays = 7;
	/**
	 * Configurable number of days that a user can attach file to a post
	 */
	private static int maxAttachDays = 1;
	/**
	 * Configurable number of days that a user can delete a post
	 */
	private static int maxDeleteDays = 1;
	/**
	 * Default number of rows (of Guest user) shown per page
	 */
	private static int rowsPerPage = 10;
	/**
	 * This is the number of rows returned when list threads for RSS
	 */
	private static int rowsPerRSS = 15;
	private static int maxHotTopics = 10;
	private static int maxHttpRequestsPerHourPerIP = 200;
	private static int maxPostsPerHourPerIP = 20;
	private static int maxPostsPerHourPerMember = 10;
	private static int maxMembersPerHourPerIP = 2;
	private static int maxLoginsPerHourPerIP = 5;
	private static int maxMessagesPerHourPerIP = 5;
	private static int maxPasswordDays = 0;
	private static int maxCharsInShortSummary = 100;
	private static int maxCharsInLongSummary = 1000;
	private static int maxCharsInRSS = 500;
	/**
	 * Do we allow storing backup files on the server? Currently not used. 
	 */
	static boolean ENABLE_BACKUP_ON_SERVER = true;
	/**
	 * Maximum size of the import file (in bytes) we will allow to be uploaded to server before processing.
	 */
	private static int maxImportSize = 4096000;
	/**
	 * This is the default value of watch option
	 * @see com.mvnforum.db.WatchBean  for the constant values
	 */
	private static int defaultWatchOption = 0;
	private static int defaultModerationOption = 0;
	private static int defaultWatchType = 1;
	/**
	 * This is the default value of watch option
	 * @see com.mvnforum.db.WatchBean  for the constant values
	 */
	private static boolean haveInternet = true;
	private static int defaultStatusOfRegisteredMember = 0;
	private static boolean enableRWC = false;
	private static String templateDir = "";
	private static Configuration freeMarkerConfiguration;
	private static String tempDir = "";
	private static String searchPostIndexDir = "";
	private static String searchMemberIndexDir = "";
	private static String searchAttachmentIndexDir = "";
	private static String searchAlbumItemIndexDir = "";
	private static String attachmentDir = "";
	private static String pmAttachmentDir = "";
	private static String backupDir = "";
	private static String logDir = "";
	private static String avatarDir = "";
	private static String albumItemDir = "";

}

//*********************REFACTORED CODE ****************
