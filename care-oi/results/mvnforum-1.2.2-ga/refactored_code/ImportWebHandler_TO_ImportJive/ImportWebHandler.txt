/*
 * $Header: /cvsroot/mvnforum/mvnforum/src/com/mvnforum/admin/ImportWebHandler.java,v 1.20 2008/05/30 18:08:37 minhnn Exp $
 * $Author: minhnn $
 * $Revision: 1.20 $
 * $Date: 2008/05/30 18:08:37 $
 *
 * ====================================================================
 *
 * Copyright (C) 2002-2007 by MyVietnam.net
 *
 * All copyright notices regarding mvnForum MUST remain
 * intact in the scripts and in the outputted HTML.
 * The "powered by" text/logo with a link back to
 * http://www.mvnForum.com and http://www.MyVietnam.net in
 * the footer of the pages MUST remain visible when the pages
 * are viewed on the internet or intranet.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Support can be obtained from support forums at:
 * http://www.mvnForum.com/mvnforum/index
 *
 * Correspondence and Marketing Questions can be sent to:
 * info at MyVietnam net
 *
 * @author: Igor Manic
 */
package com.mvnforum.admin;

import java.io.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.mvnforum.MVNForumConfig;
import com.mvnforum.MVNForumGlobal;
import com.mvnforum.MVNForumResourceBundle;
import com.mvnforum.admin.importexport.SetParentRule;
import com.mvnforum.admin.importexport.jive.ImportJive;
import com.mvnforum.admin.importexport.jive.JiveForumXML;
import com.mvnforum.admin.importexport.jive.JiveGroupXML;
import com.mvnforum.admin.importexport.jive.JiveMessageXML;
import com.mvnforum.admin.importexport.jive.JiveThreadXML;
import com.mvnforum.admin.importexport.jive.JiveUserXML;
import com.mvnforum.admin.importexport.jive.JiveXML;
import com.mvnforum.admin.importexport.mvnforum.ImportMvnForum;
import com.mvnforum.auth.*;
import com.mvnforum.db.AttachmentDAO;
import com.mvnforum.db.CategoryDAO;
import com.mvnforum.db.FavoriteThreadDAO;
import com.mvnforum.db.ForumDAO;
import com.mvnforum.db.GroupForumDAO;
import com.mvnforum.db.GroupPermissionDAO;
import com.mvnforum.db.GroupsDAO;
import com.mvnforum.db.MemberDAO;
import com.mvnforum.db.MemberForumDAO;
import com.mvnforum.db.MemberGroupDAO;
import com.mvnforum.db.MemberPermissionDAO;
import com.mvnforum.db.MessageFolderDAO;
import com.mvnforum.db.PostDAO;
import com.mvnforum.db.RankDAO;
import com.mvnforum.db.ThreadDAO;
import com.mvnforum.db.WatchDAO;
import com.mvnforum.service.MvnForumServiceFactory;
import com.mvnforum.service.SearchService;
import com.mvnforum.user.UserModuleConfig;
import net.myvietnam.mvncore.db.DBUtils;
import net.myvietnam.mvncore.exception.*;
import net.myvietnam.mvncore.filter.DisableHtmlTagFilter;
import net.myvietnam.mvncore.filter.EnableHtmlTagFilter;
import net.myvietnam.mvncore.service.FileUploadParserService;
import net.myvietnam.mvncore.service.MvnCoreServiceFactory;
import net.myvietnam.mvncore.util.*;
import net.myvietnam.mvncore.web.*;
import net.myvietnam.mvncore.web.fileupload.FileItem;
import net.myvietnam.mvncore.web.fileupload.FileUploadException;
import net.myvietnam.mvncore.web.impl.GenericRequestServletImpl;
import org.apache.commons.digester.Digester;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.xml.sax.SAXException;

/**
 * @author Igor Manic
 * @version $Revision: 1.20 $, $Date: 2008/05/30 18:08:37 $
 * <br/>
 * <code>ImportWebHandler</code> class implements methods that process HTTP
 * requests for import. Data could be imported from MVN Forum XML file conforming
 * <a href="http://www.mvnforum.com/mvn.dtd">http://www.mvnforum.com/mvn.dtd</a>,
 * or from MVN Forum backup ZIP file. Data can also be migrated from other sources
 * (for now, it's only available for <code>Jive Forums</code>).
 *
 */
public final class ImportWebHandler {

    /** Message log. */
    private static final Log log = LogFactory.getLog(ImportWebHandler.class);

    private static PrintWriter outputHtml = null;

    /** Cannot instantiate. */
    private ImportWebHandler() {
    }

    /**
     * All output messages (status, informational and error) will be written
     * to <code>outHtml</code>.
     *
     * @param outHtml <code>PrintWriter</code> to write all output to. If it is
     *                <code>null</code>, there will be no output messages.
     */
    public static void setOutputHtmlWriter(PrintWriter outHtml) {
        ImportWebHandler.outputHtml = outHtml;
    }

    public static Vector getBackupFilesOnServer() {
        Vector result = new Vector();
        File dir = new File(MVNForumConfig.getBackupDir());
        File[] files = dir.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                File file = files[i];
                if (file.isFile()) {
                    result.add(DisableHtmlTagFilter.filter(file.getName()));
                } //else ignore subdirs
            }
        }
        return result;
    }

    /**
     * This is the main import request dispatcher. It parses request
     * parameters, and decides what is the type of file used and what procedure
     * to call (restore from mvnForum XML, or mvnForum ZIP, or migrate from Jive XML, ...).
     * It also extracts additional request parameters, if they exist. Then it calls
     * the desired procedure and gives it all parameters it extracted from the request.<br/>
     * //todo Igor: add @see tags for all importXml/Zip methods
     *
     * @param request <code>HttpServletRequest</code> object of the request.
     * @param response <code>HttpServletResponse</code> object of the request.
     *
     * @throws ImportException
     * @throws AuthenticationException
     * @throws DatabaseException
     *
     */
    public static void importXmlZip(HttpServletRequest request, HttpServletResponse response)
        throws ImportException, AuthenticationException, DatabaseException {

        OnlineUserManager onlineUserManager = OnlineUserManager.getInstance();
        OnlineUser onlineUser = onlineUserManager.getOnlineUser(request);
        MVNForumPermission permission = onlineUser.getPermission();
        permission.ensureCanAdminSystem();

        Locale locale = I18nUtil.getLocaleInRequest(request);

        int sizeMax = MVNForumConfig.getMaxImportSize();
        int sizeThreshold = 100000;// max memory used = 100K
        String tempDir = MVNForumConfig.getTempDir();
        List fileItems;
        try {
            GenericRequest genericRequest = new GenericRequestServletImpl(request);
            FileUploadParserService fileUploadParserService = MvnCoreServiceFactory.getMvnCoreService().getFileUploadParserService();
            fileItems = fileUploadParserService.parseRequest(genericRequest, sizeMax, sizeThreshold, tempDir, "UTF-8");
        } catch (FileUploadException ex) {
            log.error("Cannot upload", ex);
            String localizedMessage = MVNForumResourceBundle.getString(locale, "java.io.IOException.cannot_upload", new Object[] {ex.getMessage()});
            throw new ImportException(localizedMessage);
            //throw new ImportException("Cannot upload file. Detailed reason: " + ex.getMessage());
        }

        // values that must get from the form
        String serverImportFilename   = null; //if importing from the server backup directory
        String clientImportFilename   = null; //if uploading import file
        int clientImportFileSize      = 0;    //if uploading import file
        FileItem clientImportFileItem = null; //if uploading import file

        int importType = MVNForumConfig.IMPORTEXPORT_TYPE_MVN_XML; //default is MVN Forum XML
        boolean clearIfError = true; //default is to reset database in case of error
        int messageLevel = MVNForumConfig.MESSAGE_LEVEL_ALL_MESSAGES;
        Vector otherFieldValues=new Vector();

        int      logonMemberID     = onlineUser.getMemberID();
        String   logonMemberName   = onlineUser.getMemberName();
        Calendar importTime        = Calendar.getInstance();
        String   importIP          = request.getRemoteAddr();
        File     importFile        = null;
        boolean  deleteAfterImport = false;

        try {
            for (int i = 0; i < fileItems.size(); i++ ) {
                FileItem currentFileItem = (FileItem)fileItems.get(i);
                //content-type: currentFileItem.getContentType();
                String fieldName = currentFileItem.getFieldName();
                boolean isFormField = currentFileItem.isFormField();

                if ( (fieldName.equals("ServerImportFile")) && (isFormField) ) {
                    serverImportFilename=EnableHtmlTagFilter.filter(currentFileItem.getString());
                    log.debug("serverImportFilename = " + serverImportFilename);
                    currentFileItem.delete(); currentFileItem=null;

                } else if (fieldName.equals("ClientImportFile")) {
                    if (isFormField) {
                        String localizedMessage = MVNForumResourceBundle.getString(locale, "mvncore.exception.ImportException.cannot_process_uploaded_import_file_with_a_form_field");
                        throw new ImportException(localizedMessage);
                        //throw new ImportException("Cannot process uploaded import file with a form field.");
                    }
                    clientImportFileSize = (int)currentFileItem.getSize();
                    String fullFilePath = currentFileItem.getName();
                    clientImportFilename = FileUtil.getFileName(fullFilePath);
                    log.debug("clientImportFilename = " + clientImportFilename);
                    // now save to clientImportFileItem
                    clientImportFileItem = currentFileItem;

                } else if ( (fieldName.equals("ImportType")) && (isFormField) ) {
                    try {
                        importType=Integer.parseInt(currentFileItem.getString());
                    } catch (NumberFormatException e) {
                        importType=MVNForumConfig.IMPORTEXPORT_TYPE_MVN_XML; //default
                    }
                    currentFileItem.delete(); currentFileItem=null;
                } else if ( (fieldName.equals("ClearIfError")) && (isFormField) ) {
                    int clearInt=1;
                    try {
                        clearInt=Integer.parseInt(currentFileItem.getString());
                    } catch (NumberFormatException e) {
                        clearInt=1; //default
                    }
                    if (clearInt==0) clearIfError=false;
                    else clearIfError=true;
                    currentFileItem.delete(); currentFileItem=null;
                } else if ( (fieldName.equals("MessageLevel")) && (isFormField) ) {
                    try {
                        messageLevel=Integer.parseInt(currentFileItem.getString());
                    } catch (NumberFormatException e) {
                        messageLevel=MVNForumConfig.MESSAGE_LEVEL_ALL_MESSAGES; //default
                    }
                    currentFileItem.delete(); currentFileItem=null;

                } else { //other field values
                    if (isFormField) {
                        otherFieldValues.add(new String(fieldName));
                        otherFieldValues.add(currentFileItem.getString());
                    }
                    currentFileItem.delete(); currentFileItem=null;
                }
            } //for (int i = 0; i < fileItems.size(); i++ )

            if ((serverImportFilename!=null) && (!serverImportFilename.equals(""))) {
                //import from server backup repository
                String filepath = MVNForumConfig.getBackupDir() + File.separatorChar + serverImportFilename;
                importFile=new File(filepath);
                deleteAfterImport=false;

            } else {
                //upload client import file
                deleteAfterImport=true; //delete uploaded file
                if ((clientImportFilename==null) || (clientImportFilename.equals(""))) {
                    log.error("Cannot import. Please choose either a file on server, or upload a file.");
                    String localizedMessage = MVNForumResourceBundle.getString(locale, "mvncore.exception.ImportException.cannot_import.choose_a_file_on_server_or_upload_a_file");
                    throw new ImportException(localizedMessage);
                    //throw new ImportException("Cannot import. Please choose either a file on server, or upload a file.");
                } else {
                    log.debug("ImportWebHandler : process upload with temp dir = " + MVNForumConfig.getTempDir());
                    if (clientImportFileSize == 0) {
                        String localizedMessage = MVNForumResourceBundle.getString(locale, "mvncore.exception.ImportException.cannot_process_import.file_size_is_zero");
                        throw new ImportException(localizedMessage);
                        //throw new ImportException("Cannot process an import file with size = 0. Please check the file size or check if your file is missing.");
                    }
                }

                try {
                    String filepath = MVNForumConfig.getTempDir() + File.separatorChar +
                               "import-" +
                               ((importType==MVNForumConfig.IMPORTEXPORT_TYPE_JIVE_XML)?"jive-":"") +
                               importTime.get(Calendar.YEAR) + "-" +
                               importTime.get(Calendar.MONTH) + "-" +
                               importTime.get(Calendar.DAY_OF_MONTH) + "-" +
                               importTime.get(Calendar.HOUR_OF_DAY) + "-" +
                               importTime.get(Calendar.MINUTE) + "-" +
                               importTime.get(Calendar.SECOND) +
                               ((importType==MVNForumConfig.IMPORTEXPORT_TYPE_MVN_ZIP)?".zip":".xml");
                    log.debug("Client import file to save to file system = " + filepath);
                    clientImportFileItem.write(new File(filepath));
                    importFile=new File(filepath);
                    clientImportFileItem.delete();
                    clientImportFileItem=null;
                } catch (Exception ex) {
                    log.error("Cannot save the import file.", ex);
                    String localizedMessage = MVNForumResourceBundle.getString(locale, "mvncore.exception.ImportException.cannot_import.cannot_save_import_file");
                    throw new ImportException(localizedMessage);
                    //throw new ImportException("Cannot save the import file to the file system.", ex);
                }
            }

        } finally {
            for (int i = 0; i < fileItems.size(); i++ ) {
                try { ((FileItem)fileItems.get(i)).delete();
                } catch (Exception e) {}
            }
            fileItems.clear(); fileItems=null;
        }

        if (!importFile.exists()) {
            String localizedMessage = MVNForumResourceBundle.getString(locale, "mvncore.exception.ImportException.cannot_find_import_file");
            throw new ImportException(localizedMessage);
            //throw new ImportException("Can't find import file.");
        }
        else if (!importFile.isFile()) {
            String localizedMessage = MVNForumResourceBundle.getString(locale, "mvncore.exception.ImportException.import_file_is_not_a_file");
            throw new ImportException(localizedMessage);
            //throw new ImportException("Import \"file\" is actually not a file (probably a directory).");
        }
        else if (!importFile.canRead()) {
            String localizedMessage = MVNForumResourceBundle.getString(locale, "mvncore.exception.ImportException.dont_have_read_permission");
            throw new ImportException(localizedMessage);
            //throw new ImportException("Don't have a permission to read an import file from server.");
        }

        try {
            switch (importType) {
                case MVNForumConfig.IMPORTEXPORT_TYPE_MVN_XML:
                    ImportMvnForum.importXml(importFile,
                                            request, response,
                                            logonMemberID, logonMemberName,
                                            importTime, importIP,
                                            clearIfError, messageLevel);
                    break;
                case MVNForumConfig.IMPORTEXPORT_TYPE_MVN_ZIP:
                    ImportMvnForum.importZip(importFile,
                                            request, response,
                                            logonMemberID, logonMemberName,
                                            importTime, importIP,
                                            clearIfError, messageLevel);
                    break;
                case MVNForumConfig.IMPORTEXPORT_TYPE_JIVE_XML:
                    importXml(importFile, request, response, logonMemberID,
							logonMemberName, importTime, importIP,
							clearIfError, otherFieldValues, messageLevel);
                    break;

                default:
                    log.error("importXmlZip: invalid importType = " + importType);
                    String localizedMessage = MVNForumResourceBundle.getString(locale, "mvncore.exception.ImportException.invalid_import_type_specified");
                    throw new ImportException(localizedMessage);
                    //throw new ImportException("Invalid import type specified.");
            }
        } catch (ImportException e) {
           /* In case of this exception, I already printed error message.
            * Now I should NOT allow this exception to propagate higher, since
            * it will then initiate errorpage, which I don't want, and can't
            * allow because already commited output.
            * So, I don't do anything here, just catch it.
            */
        } finally {
            /* Logout current user, even if the import raised an exception,
               because database data are probably changed anyway. */
            onlineUserManager.logout(request, response);
            //this didn't work: ManagerFactory.getOnlineUserFactory().logout(request, response);

            //delete uploaded file, but only if it's not already deleted !
            if (deleteAfterImport && (importFile.exists())) {
                importFile.delete();
            }
            importFile=null;
        }
    }


// =================================================================
// ===== PRINTING STATUS AND ERROR MESSAGES TO THE OUTPUT HTML =====
// =================================================================
    private static boolean oddLine=true;
    private static boolean outputHtmlNotEnded=false;
    private static boolean outputNonImportantMessages=true;
    private static boolean outputImportantMessages=true;
    //outputErrors is always true

    public static void setMessageOutputLevel(int messageLevel) {
        switch (messageLevel) {
            case MVNForumConfig.MESSAGE_LEVEL_ONLY_ERRORS:
                outputImportantMessages=false;
                outputNonImportantMessages=false;
                break;
            case MVNForumConfig.MESSAGE_LEVEL_IMPORTANT_MESSAGES:
                outputImportantMessages=true;
                outputNonImportantMessages=false;
                break;
            default: //MVNForumConfig.MESSAGE_LEVEL_ALL_MESSAGES
                outputNonImportantMessages=true;
                outputImportantMessages=true;
        }
    }


    public static void startHtml(HttpServletRequest request) {
        if (outputHtml!=null) {
            outputHtmlNotEnded=true;
            outputHtml.println("<html>");
            outputHtml.println("<head>");
            outputHtml.println("   <title>mvnForum - Import/Restore Process</title>");
            outputHtml.println("   <meta name=\"copyright\" content=\"This software is copyrighted by MyVietnam.net and released under the terms of the GNU General Public License GPL license. All rights reserved.\">");
            outputHtml.println("   <meta name=\"Keywords\" content=\"mvnForum, server side java, online meetings, collaboration, bulletin board, board, forum, discussion board, jsp, servlet, java, j2se, j2ee, database, jdbc, connection pool, mysql, MyVietnam, mvnForum, framework, web app, web application, servlet container, tomcat, jboss, weblogic, websphere\">");
            outputHtml.println("   <meta name=\"Description\" content=\"mvnForum is a powerful Jsp/Servlet forum (discussion board) - based on Java technology.\">");
            outputHtml.println("   <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">");
            outputHtml.println("   <meta http-equiv=\"Expires\" content=\"-1\">");
            outputHtml.println("   <link href=\""+request.getContextPath()+"/mvnplugin/mvnforum/css/style.css\" rel=\"stylesheet\" type=\"text/css\">");
            outputHtml.println("</head>");
            outputHtml.println("<body leftmargin=\"0\" topmargin=\"0\">");
            outputHtml.println("<br/>");
            outputHtml.println("");
            outputHtml.println("<table class=\"tborder\" width=\"95%\" cellpadding=\"3\" align=\"center\">");
            outputHtml.println("<tr class=\"theader\">");
            outputHtml.println("   <td align=\"center\">Messages during the process</td>");
            outputHtml.println("</tr>");
            outputHtml.flush();
            oddLine=true;
        }
    }

    public static void endHtml() {
        if (outputHtml!=null) {
            outputHtml.println("</table>");
            outputHtml.println("");
            outputHtml.println("<br/>");
            outputHtml.println("</body>");
            outputHtml.println("</html>");
            outputHtml.flush();
            outputHtmlNotEnded=false;
        }
    }

    public static void addMessage(String message) {
        if (outputNonImportantMessages) {
            outputHtmlTableRow(message, "messageText");
        }
    }

    public static void addErrorMessage(String message) {
        outputHtmlTableRow(message, "messageTextBoldRed");
    }

    /**
     * Adds warning that the process contained some errors, and the database
     * might be inconsistent now. It also tries to clear the database and
     * create default entries, including "admin" member.
     */
    public static void addFinalErrorHandling(HttpServletRequest request, boolean resetAllData) {
        outputHtmlTableRow("&nbsp;", "messageTextBoldRed"); //add one empty row in output message table
        String message = "There was an error during the import. DATA ARE NOW PROBABLY DAMAGED.<br/>";
        if (resetAllData) message+="Trying to clear the database and create \"admin\" member (password will be \"admin\")...<br/>";
        outputHtmlTableRow(message, "messageTextBoldRed");

        String indexUrl = request.getContextPath()+
                          UserModuleConfig.getUrlPattern()+
                          "/index";
        String finalMessage = "If you still want to import these data that produced an error, " +
               "please correct above errors first.<br/>" +
               "Then proceed to: &nbsp;&nbsp;&nbsp;"+
               "<a href=\"login\" class=\"menuLink\">Login</a>&nbsp;|&nbsp;" +
               "<a href=\"index\" class=\"menuLink\">Admin Index</a>&nbsp;|&nbsp;" +
               "<a href=\""+indexUrl+"\" class=\"menuLink\">Forum Index</a><br/>" +
               "<span class=\"messageTextBoldRed\">" +
               "Notice you should enter new username and password!" +
               "</span>";
        try {
            if (resetAllData) {
                ImportWebHelper.clearDatabase();
                ImportWebHelper.clearFiles(request.getSession().getServletContext());
                ImportWebHelper.createDefaultContents();
            }
        } catch (IOException e) {
            addErrorMessage("Still got an error. We strongly suggest you to create new empty database.<br/>");
        } catch (DatabaseException e) {
            addErrorMessage("Still got an error. We strongly suggest you to create new empty database.<br/>");
        } catch (CreateException e) {
            addErrorMessage("Still got an error. We strongly suggest you to create new empty database.<br/>");
        } catch (DuplicateKeyException e) {
            addErrorMessage("Still got an error. We strongly suggest you to create new empty database.<br/>");
        } catch (ObjectNotFoundException e) {
            addErrorMessage("Still got an error. We strongly suggest you to create new empty database.<br/>");
        } catch (ForeignKeyNotFoundException e) {
            addErrorMessage("Still got an error. We strongly suggest you to create new empty database.<br/>");
        } finally {
            outputHtmlTableRow(finalMessage, "messageTextBoldRed");
        }
    }

    public static void addSuccessMessage(HttpServletRequest request) {
        String indexUrl = request.getContextPath()+
                          UserModuleConfig.getUrlPattern()+
                          "/index";
        String message = "Successful. Proceed to: &nbsp;&nbsp;&nbsp;"+
                         "<a href=\"login\" class=\"menuLink\">Login</a>&nbsp;|&nbsp;" +
                         "<a href=\"index\" class=\"menuLink\">Admin Index</a>&nbsp;|&nbsp;" +
                         "<a href=\""+indexUrl+"\" class=\"menuLink\">Forum Index</a><br/>" +
                         "<span class=\"messageTextBoldRed\">" +
                         "Notice you should enter new username and password!" +
                         "</span>";
        outputHtmlTableRow(message, "messageTextBold");
    }

    public static void addImportantMessage(String message) {
        if (outputImportantMessages) {
            outputHtmlTableRow(message, "messageTextBoldRed");
        }
    }

    private static void outputHtmlTableRow(String message, String cssClass) {
        if (outputHtml!=null) {
            if (oddLine) {
                outputHtml.println("<tr class=\"trow1\">");
            } else {
                outputHtml.println("<tr class=\"trow2\">");
            }
            outputHtml.println("   <td class=\""+cssClass+"\">"+message+"</td>");
            outputHtml.println("</tr>");
            outputHtml.flush();
            oddLine=!oddLine;
        }
    }

	/**
	 * This method performs processing of Jive's XML backup file <code>importFile</code> and imports the data into the MVN Forum system. It clears the database and files, does neccessary setup (including startup of message output), and calls  {@link #processXml(File,Calendar)}  to do actual processing.<br/>
	 * @param importFile  Jive XML file to be imported.
	 * @param request  Current session's <code>HttpServletRequest</code> object.
	 * @param response  Current session's <code>HttpServletResponse</code> object.
	 * @param logonMemberID  MemberID of user who is logged in, and who initiated import process.
	 * @param logonMemberName  MemberName of user who is logged in, and who initiated import process.
	 * @param importTime  The moment when import process was started.
	 * @param importIP  From this IP address admin requested import.
	 * @param clearIfError  Should it clear/reset the database in case of error.
	 * @param otherFieldValues  Vector of name/value pairs of other form fields (like <code>RootCategory</code>, <code>ForumPasswords</code>)
	 * @param messageLevel  What messages should be written to output during the process. For details see  {@link com.mvnforum.MVNForumConstant#MESSAGE_LEVEL_ALL_MESSAGES} , {@link com.mvnforum.MVNForumConfig#MESSAGE_LEVEL_IMPORTANT_MESSAGES}  and {@link com.mvnforum.MVNForumConfig#MESSAGE_LEVEL_ONLY_ERRORS} .
	 * @exception ImportException  If there is an error during the process. See  {@link net.myvietnam.mvncore.exception.ImportException} .
	 */
	public static void importXml(File importFile, HttpServletRequest request,
			HttpServletResponse response, int logonMemberID,
			String logonMemberName, Calendar importTime, String importIP,
			boolean clearIfError, Vector otherFieldValues, int messageLevel)
			throws ImportException {
		for (int i = 0; i < otherFieldValues.size() - 1; i += 2) {
			String name = (String) otherFieldValues.get(i);
			String value = (String) otherFieldValues.get(i + 1);
			if (name != null) {
				if (name.equals("ForumPasswords"))
					JiveXML.allForumsPassword = value;
				else if (name.equals("RootCategory"))
					JiveXML.rootCategoryName = value;
				else if (name.equals("RootCategoryDesc"))
					JiveXML.rootCategoryDesc = value;
				else if (name.equals("JiveGuest"))
					JiveXML.guestName = value;
				else if (name.equals("JiveAdmin"))
					JiveXML.adminName = value;
			}
		}
		try {
			response.setContentType("text/html; charset=utf-8");
			setOutputHtmlWriter(response.getWriter());
			setMessageOutputLevel(messageLevel);
			startHtml(request);
			clearDatabase();
			clearFiles(request.getSession().getServletContext());
		} catch (DatabaseException e) {
			handleFatalError(
					"Database error while clearing previous contents.", e,
					clearIfError, request);
		} catch (IOException e) {
			handleFatalError("I/O error while clearing previous contents.", e,
					clearIfError, request);
		}
		try {
			processXml(importFile, importTime);
			handleSuccess(request);
		} catch (ImportException e) {
			handleFatalError(e.getMessage(), e.getException(), clearIfError,
					request);
		} catch (IOException e) {
			handleFatalError("I/O error while reading XML file.", e,
					clearIfError, request);
		} catch (SAXException e) {
			if (e.getException() == null) {
				handleFatalError("Error while parsing uploaded XML file.", e,
						clearIfError, request);
			} else {
				handleFatalError("Error while parsing uploaded XML file.",
						e.getException(), clearIfError, request);
			}
		} finally {
		}
	}

	protected static void setOutputHtmlWriter(PrintWriter outWriter) {
		ImportWebHandler.setOutputHtmlWriter(outWriter);
	}

	protected static void setMessageOutputLevel(int messageLevel) {
		ImportWebHandler.setMessageOutputLevel(messageLevel);
	}

	protected static void startHtml(HttpServletRequest request) {
		ImportWebHandler.startHtml(request);
	}

	protected static void clearDatabase() throws DatabaseException {
		addImportantMessage("Clearing previous database contents...");
		clearTable(RankDAO.TABLE_NAME);
		clearTable(FavoriteThreadDAO.TABLE_NAME);
		clearTable(AttachmentDAO.TABLE_NAME);
		clearTable(WatchDAO.TABLE_NAME);
		clearTable(PostDAO.TABLE_NAME);
		clearTable(ThreadDAO.TABLE_NAME);
		clearTable(MemberForumDAO.TABLE_NAME);
		clearTable(GroupForumDAO.TABLE_NAME);
		clearTable(ForumDAO.TABLE_NAME);
		clearTable(CategoryDAO.TABLE_NAME);
		clearTable(MemberGroupDAO.TABLE_NAME);
		clearTable(GroupPermissionDAO.TABLE_NAME);
		clearTable(GroupsDAO.TABLE_NAME);
		clearTable(MemberPermissionDAO.TABLE_NAME);
		clearTable(MessageFolderDAO.TABLE_NAME);
		clearTable(MemberDAO.TABLE_NAME);
	}

	protected static void clearFiles(ServletContext context) throws IOException {
		addImportantMessage("Deleting previous files...");
		SearchService service = MvnForumServiceFactory.getMvnForumService()
				.getSearchService();
		if (service.savePostOnDisk()) {
			emptyDirectory(MVNForumConfig.getSearchPostIndexDirName());
		}
		if (service.saveMemberOnDisk()) {
			emptyDirectory(MVNForumConfig.getSearchMemberIndexDirName());
		}
		emptyDirectory(MVNForumConfig.getAttachmentDir());
		emptyDirectory(context.getRealPath(MVNForumGlobal.UPLOADED_AVATAR_DIR));
	}

	private static void handleFatalError(String message, Exception e,
			boolean clearIfError, HttpServletRequest request)
			throws ImportException {
		if (e == null)
			log.error(message);
		else
			log.error(message, e);
		if ((e == null) || (e.getMessage() == null))
			addErrorMessage(message);
		else
			addErrorMessage(message + "<br/>Cause: " + e.getMessage());
		ImportWebHelper.addFinalErrorHandling(request, clearIfError);
		endHtml();
		if (e == null)
			throw new ImportException(message);
		else
			throw new ImportException(message, e);
	}

	/**
	 * This method performs actual processing of Jive's XML file <code>inputFile</code> and imports the data into the MVN Forum system.<br/> Don't use this method directly. Instead, you should use {@link #importXml(File,HttpServletRequest,HttpServletResponse,int,String,Calendar,String,boolean,Vector,int)} .
	 * @param inputFile  Jive XML file to be imported.
	 * @param importTime  The moment when import process was started.
	 * @exception IOException  If there is an I/O error while processing XML file.
	 * @exception SAXException  If there is an error while parsing XML file.
	 * @exception ImportException  If there is an error while adding some default values to database.
	 */
	protected static void processXml(File inputFile, Calendar importTime)
			throws IOException, SAXException, ImportException {
		addImportantMessage("Starting migration of data...");
		Digester digester = new Digester();
		digester.setValidating(true);
		digester.setNamespaceAware(true);
		digester.addObjectCreate("Jive", JiveXML.class);
		digester.addSetProperties("Jive", "xmlversion", "jiveXmlVersion");
		digester.addSetProperties("Jive", "exportDate", "jiveExportDate");
		digester.addObjectCreate("Jive/UserList/User", JiveUserXML.class);
		digester.addCallMethod("Jive/UserList/User", "addJiveUser", 9);
		digester.addCallParam("Jive/UserList/User/Username", 0);
		digester.addCallParam("Jive/UserList/User/Password", 1);
		digester.addCallParam("Jive/UserList/User/Email", 2);
		digester.addCallParam("Jive/UserList/User/Email", 3, "visible");
		digester.addCallParam("Jive/UserList/User/Name", 4);
		digester.addCallParam("Jive/UserList/User/Name", 5, "visible");
		digester.addCallParam("Jive/UserList/User/CreationDate", 6);
		digester.addCallParam("Jive/UserList/User/ModifiedDate", 7);
		digester.addCallParam("Jive/UserList/User/RewardPoints", 8);
		ImportJive
				.addMessage("All Jive/UserList/User/PropertyList/Property will be ignored.");
		digester.addObjectCreate("Jive/GroupList/Group", JiveGroupXML.class);
		digester.addCallMethod("Jive/GroupList/Group", "addJiveGroup");
		digester.addCallMethod("Jive/GroupList/Group/Name", "setGroupName", 0);
		digester.addCallMethod("Jive/GroupList/Group/Description",
				"setGroupDescription", 0);
		digester.addCallMethod("Jive/GroupList/Group/CreationDate",
				"setGroupCreationDate", 0);
		digester.addCallMethod("Jive/GroupList/Group/ModifiedDate",
				"setGroupModifiedDate", 0);
		digester.addCallMethod(
				"Jive/GroupList/Group/AdministratorList/Username",
				"setGroupOwnerName", 0);
		ImportJive
				.addMessage("All Jive/GroupList/Group/PropertyList/Property will be ignored.");
		ImportJive
				.addMessage("All Jive/GroupList/Group/AdministratorList/Username will be ignored, except for the first one (to become GroupOwner).");
		digester.addCallMethod("Jive/GroupList/Group/MemberList/Username",
				"addJiveGroupMember", 0);
		digester.addObjectCreate("Jive/ForumList/Forum", JiveForumXML.class);
		digester.addCallMethod("Jive/ForumList/Forum", "addJiveForum");
		digester.addCallMethod("Jive/ForumList/Forum/Name", "setForumName", 0);
		digester.addCallMethod("Jive/ForumList/Forum/Description",
				"setForumDescription", 0);
		digester.addCallMethod("Jive/ForumList/Forum/CreationDate",
				"setForumCreationDate", 0);
		digester.addCallMethod("Jive/ForumList/Forum/ModifiedDate",
				"setForumModifiedDate", 0);
		ImportJive
				.addMessage("All Jive/ForumList/Forum/FilterList/Filter will be ignored.");
		ImportJive
				.addMessage("All Jive/ForumList/Forum/PropertyList/Property will be ignored.");
		digester.addCallMethod(
				"Jive/ForumList/Forum/PermissionList/UserPermissionList/UserPermission",
				"addJiveForumUser", 3);
		digester.addCallParam(
				"Jive/ForumList/Forum/PermissionList/UserPermissionList/UserPermission",
				0, "usertype");
		digester.addCallParam(
				"Jive/ForumList/Forum/PermissionList/UserPermissionList/UserPermission",
				1, "username");
		digester.addCallParam(
				"Jive/ForumList/Forum/PermissionList/UserPermissionList/UserPermission",
				2, "permission");
		digester.addCallMethod(
				"Jive/ForumList/Forum/PermissionList/GroupPermissionList/GroupPermission",
				"addJiveForumGroup", 2);
		digester.addCallParam(
				"Jive/ForumList/Forum/PermissionList/GroupPermissionList/GroupPermission",
				0, "groupname");
		digester.addCallParam(
				"Jive/ForumList/Forum/PermissionList/GroupPermissionList/GroupPermission",
				1, "permission");
		digester.addObjectCreate("Jive/ForumList/Forum/ThreadList/Thread",
				JiveThreadXML.class);
		SetParentRule threadParentRule = new SetParentRule("setParentForum");
		digester.addRule("Jive/ForumList/Forum/ThreadList/Thread",
				threadParentRule);
		digester.addCallMethod("Jive/ForumList/Forum/ThreadList/Thread",
				"addJiveThread");
		digester.addCallMethod(
				"Jive/ForumList/Forum/ThreadList/Thread/CreationDate",
				"setCreationDate", 0);
		digester.addCallMethod(
				"Jive/ForumList/Forum/ThreadList/Thread/ModifiedDate",
				"setModifiedDate", 0);
		ImportJive
				.addMessage("All Jive/ForumList/Forum/ThreadList/Thread/PropertyList/Property will be ignored.");
		digester.addCallMethod(
				"Jive/ForumList/Forum/ThreadList/Thread/WatchList/Watch",
				"addJiveThreadWatch", 3);
		digester.addCallParam(
				"Jive/ForumList/Forum/ThreadList/Thread/WatchList/Watch", 0,
				"type");
		digester.addCallParam(
				"Jive/ForumList/Forum/ThreadList/Thread/WatchList/Watch", 1,
				"expirable");
		digester.addCallParam(
				"Jive/ForumList/Forum/ThreadList/Thread/WatchList/Watch/Username",
				2);
		digester.addObjectCreate("*/Message", JiveMessageXML.class);
		SetParentRule messageParentRule = new SetParentRule(
				"setParentThreadOrPost");
		digester.addRule("*/Message", messageParentRule);
		digester.addCallMethod("*/Message", "addJiveMessage");
		digester.addCallMethod("*/Message/Subject", "setPostSubject", 0);
		digester.addCallMethod("*/Message/Body", "setPostBody", 0);
		digester.addCallMethod("*/Message/Username", "setPostUsername", 0);
		digester.addCallMethod("*/Message/CreationDate", "setPostCreationDate",
				0);
		digester.addCallMethod("*/Message/ModifiedDate", "setPostModifiedDate",
				0);
		ImportJive
				.addMessage("All */Message/PropertyList/Property will be ignored.");
		digester.addCallMethod("Jive/UserPermissionList/UserPermission",
				"addJiveUserPermission", 3);
		digester.addCallParam("Jive/UserPermissionList/UserPermission", 0,
				"usertype");
		digester.addCallParam("Jive/UserPermissionList/UserPermission", 1,
				"username");
		digester.addCallParam("Jive/UserPermissionList/UserPermission", 2,
				"permission");
		digester.addCallMethod("Jive/GroupPermissionList/GroupPermission",
				"addJiveGroupPermission", 2);
		digester.addCallParam("Jive/GroupPermissionList/GroupPermission", 0,
				"groupname");
		digester.addCallParam("Jive/GroupPermissionList/GroupPermission", 1,
				"permission");
		digester.parse(inputFile);
		try {
			for (int j = 0; j < JiveXML.addDefaultPermissionsToGuests.length; j++) {
				try {
					JiveXML.addGuestMemberPermission(Integer
							.toString(JiveXML.addDefaultPermissionsToGuests[j]));
				} catch (DuplicateKeyException e) {
				}
			}
			for (int j = 0; j < JiveXML.addDefaultPermissionsToMembers.length; j++) {
				try {
					JiveXML.addRegisteredMembersGroupPermission(Integer
							.toString(JiveXML.addDefaultPermissionsToMembers[j]));
				} catch (DuplicateKeyException e) {
				}
			}
		} catch (DatabaseException e) {
			log.error("Database error while adding default permissions.", e);
			throw new ImportException(
					"Error while adding default permissions to guests and registered members.",
					e);
		} catch (CreateException e) {
			log.error("Create data error while adding default permissions.", e);
			throw new ImportException(
					"Error while adding default permissions to guests and registered members.",
					e);
		} catch (ForeignKeyNotFoundException e) {
			log.error(
					"Foreign key not found error while adding default permissions.",
					e);
			throw new ImportException(
					"Error while adding default permissions to guests and registered members.",
					e);
		}
		if (JiveXML.foundAdminUser) {
			ImportJive
					.addImportantMessage("IMPORTANT: Jive user \""
							+ JiveXML.adminName
							+ "\" kept all his data (including password), and has SYSTEM_ADMIN "
							+ "permissions - even if he didn't have them in Jive!!!");
		} else {
			ImportJive
					.addImportantMessage("SYSTEM_ADMIN user with a name \""
							+ JiveXML.adminName
							+ "\" and password \"admin\" was created. "
							+ "For your security, you should first change that password.");
		}
	}

	private static void handleSuccess(HttpServletRequest request) {
		addSuccessMessage(request);
		endHtml();
	}

	protected static void addImportantMessage(String message) {
		ImportWebHandler.addImportantMessage(message);
	}

	private static void clearTable(String tableName) throws DatabaseException {
		execUpdateQuery("DELETE FROM " + tableName);
	}

	private static void emptyDirectory(String path) throws IOException {
		emptyDirectory(new File(path));
	}

	protected static void addErrorMessage(String message) {
		ImportWebHandler.addErrorMessage(message);
	}

	protected static void addFinalErrorHandling(HttpServletRequest request,
			boolean clearIfError) {
		ImportWebHandler.addFinalErrorHandling(request, clearIfError);
	}

	protected static void endHtml() {
		ImportWebHandler.endHtml();
	}

	/**
	 * Adds important (bold) <code>message</code> to the output stream that was setup in {@link #importXml(File,HttpServletRequest,HttpServletResponse,int,String,Calendar,String,boolean,Vector,int)} . <br/>This method was made public to be available to Jive XML processing classes.
	 * @param message  Message to be written to output.
	 * @see com.mvnforum.admin.ImportWebHelper#addImportantMessage(java.lang.String)
	 */
	public static void addImportantMessage(String message) {
		ImportWebHelper.addImportantMessage(message);
	}

	/**
	 * Adds <code>message</code> to the output stream that was setup in {@link #importXml(File,HttpServletRequest,HttpServletResponse,int,String,Calendar,String,boolean,Vector,int)} . <br/>This method was made public to be available to Jive XML processing classes.
	 * @param message  Message to be written to output.
	 * @see com.mvnforum.admin.ImportWebHelper#addMessage(java.lang.String)
	 */
	public static void addMessage(String message) {
		ImportWebHelper.addMessage(message);
	}

	protected static void addSuccessMessage(HttpServletRequest request) {
		ImportWebHandler.addSuccessMessage(request);
	}

	protected static int execUpdateQuery(String query) throws DatabaseException {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		try {
			connection = DBUtils.getConnection();
			statement = connection.prepareStatement(query);
			return statement.executeUpdate();
		} catch (SQLException sqle) {
			log.error("Sql Execution Error!", sqle);
			throw new DatabaseException(
					"Error executing SQL in ImportWebHelper.execUpdateQuery.");
		} finally {
			DBUtils.closeResultSet(resultSet);
			DBUtils.closeStatement(statement);
			DBUtils.closeConnection(connection);
		}
	}


	/**
	 * Message log. 
	 */
	private static final Log log = LogFactory.getLog(ImportJive.class);

	/**
	 * Message log. 
	 */
	private static final Log log = LogFactory.getLog(ImportWebHelper.class);

}

//*********************REFACTORED CODE ****************
